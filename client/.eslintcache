[{"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\index.js":"1","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\MainApp.js":"2","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\App.js":"3","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\store.js":"4","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\authActions.js":"5","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\Home.js":"6","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Products\\Products.js":"7","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\routes.js":"8","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\categoryAction.js":"9","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Navbars\\AdminNavbar.js":"10","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\index.js":"11","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\types.js":"12","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\errorActions.js":"13","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\ApexChart.js":"14","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\Home1.js":"15","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\itemAction.js":"16","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AppNavbar\\AppNavbar.js":"17","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\UpdateProductModal.js":"18","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Footer\\Footer.jsx":"19","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Sidebar\\Sidebar.jsx":"20","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductListPage.js":"21","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\Product.js":"22","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\views\\Dashboard.js":"23","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\views\\UserProfile.js":"24","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Customers\\CustomerList.js":"25","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\OrderList.js":"26","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Navbars\\AdminNavbarLinks.js":"27","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\categoryReducer.js":"28","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\authReducer.js":"29","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\errorReducer.js":"30","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\itemReducer.js":"31","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\customerReducer.js":"32","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\orderReducer.js":"33","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\Logout.js":"34","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\LoginModal.js":"35","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\RegisterModal.js":"36","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\TrendingProductList.js":"37","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\RegisterModal1.js":"38","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Card\\Card.js":"39","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\StatsCard\\StatsCard.js":"40","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\UserCard\\UserCard.jsx":"41","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Variables\\Variables.js":"42","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\CustomButton\\CustomButton.jsx":"43","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductList.js":"44","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\orderAction.js":"45","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\customerAction.js":"46","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Customers\\AddCustomerModal.js":"47","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\AddOrderModal.js":"48","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\EditOrderModal.js":"49","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AnimatedCard\\AnimatedCard.js":"50","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductListData.js":"51","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\NewProductModal.js":"52","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\CustomCheckbox\\CustomCheckbox.js":"53","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AnimatedCard\\AnimatedProgressProvider.js":"54","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\LazyLoadingPage\\Loading.js":"55"},{"size":245,"mtime":1612506661368,"results":"56","hashOfConfig":"57"},{"size":1451,"mtime":1612506687259,"results":"58","hashOfConfig":"57"},{"size":3440,"mtime":1612525588813,"results":"59","hashOfConfig":"57"},{"size":410,"mtime":1612508232838,"results":"60","hashOfConfig":"57"},{"size":3865,"mtime":1612506270626,"results":"61","hashOfConfig":"57"},{"size":4562,"mtime":1612510878530,"results":"62","hashOfConfig":"57"},{"size":22343,"mtime":1612525919202,"results":"63","hashOfConfig":"57"},{"size":1905,"mtime":1612523020208,"results":"64","hashOfConfig":"57"},{"size":681,"mtime":1612506281642,"results":"65","hashOfConfig":"57"},{"size":5699,"mtime":1612518487307,"results":"66","hashOfConfig":"57"},{"size":508,"mtime":1612270780983,"results":"67","hashOfConfig":"57"},{"size":1651,"mtime":1612438211574,"results":"68","hashOfConfig":"57"},{"size":301,"mtime":1599811215698,"results":"69","hashOfConfig":"57"},{"size":1607,"mtime":1610955168661,"results":"70","hashOfConfig":"57"},{"size":2420,"mtime":1612510978782,"results":"71","hashOfConfig":"57"},{"size":2990,"mtime":1612506303945,"results":"72","hashOfConfig":"57"},{"size":6062,"mtime":1612510699394,"results":"73","hashOfConfig":"57"},{"size":7367,"mtime":1612529343364,"results":"74","hashOfConfig":"57"},{"size":1168,"mtime":1612445428765,"results":"75","hashOfConfig":"57"},{"size":2289,"mtime":1612525612474,"results":"76","hashOfConfig":"57"},{"size":1583,"mtime":1612511279038,"results":"77","hashOfConfig":"57"},{"size":6996,"mtime":1612099120117,"results":"78","hashOfConfig":"57"},{"size":7695,"mtime":1612524872189,"results":"79","hashOfConfig":"57"},{"size":14596,"mtime":1612511504294,"results":"80","hashOfConfig":"57"},{"size":3961,"mtime":1612510834054,"results":"81","hashOfConfig":"57"},{"size":15894,"mtime":1612524180554,"results":"82","hashOfConfig":"57"},{"size":867,"mtime":1612511240176,"results":"83","hashOfConfig":"57"},{"size":722,"mtime":1612511452746,"results":"84","hashOfConfig":"57"},{"size":2698,"mtime":1612511471051,"results":"85","hashOfConfig":"57"},{"size":601,"mtime":1599808240235,"results":"86","hashOfConfig":"57"},{"size":2565,"mtime":1612511576867,"results":"87","hashOfConfig":"57"},{"size":2681,"mtime":1612419784791,"results":"88","hashOfConfig":"57"},{"size":2386,"mtime":1612511436019,"results":"89","hashOfConfig":"57"},{"size":988,"mtime":1611240719097,"results":"90","hashOfConfig":"57"},{"size":4950,"mtime":1611298700114,"results":"91","hashOfConfig":"57"},{"size":14192,"mtime":1611990238186,"results":"92","hashOfConfig":"57"},{"size":5877,"mtime":1612525851900,"results":"93","hashOfConfig":"57"},{"size":21519,"mtime":1612507250210,"results":"94","hashOfConfig":"57"},{"size":1312,"mtime":1612510717623,"results":"95","hashOfConfig":"57"},{"size":966,"mtime":1612188285242,"results":"96","hashOfConfig":"57"},{"size":2001,"mtime":1612095148382,"results":"97","hashOfConfig":"57"},{"size":11567,"mtime":1612502588001,"results":"98","hashOfConfig":"57"},{"size":1346,"mtime":1607335908000,"results":"99","hashOfConfig":"57"},{"size":2412,"mtime":1612523947922,"results":"100","hashOfConfig":"57"},{"size":1986,"mtime":1612506308432,"results":"101","hashOfConfig":"57"},{"size":2546,"mtime":1612511118160,"results":"102","hashOfConfig":"57"},{"size":8572,"mtime":1612510768439,"results":"103","hashOfConfig":"57"},{"size":10949,"mtime":1612440510020,"results":"104","hashOfConfig":"57"},{"size":9008,"mtime":1612511379649,"results":"105","hashOfConfig":"57"},{"size":13022,"mtime":1612510633578,"results":"106","hashOfConfig":"57"},{"size":21128,"mtime":1612525843316,"results":"107","hashOfConfig":"57"},{"size":10696,"mtime":1612432343726,"results":"108","hashOfConfig":"57"},{"size":868,"mtime":1610108831192,"results":"109","hashOfConfig":"57"},{"size":1217,"mtime":1612158023116,"results":"110","hashOfConfig":"57"},{"size":438,"mtime":1612523629145,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"ahoqqb",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"114"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"114"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"114"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"114"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"114"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\index.js",[],["247","248"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\MainApp.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\App.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\store.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\authActions.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\Home.js",["249","250"],"import React, { Component } from \"react\";\r\nimport { Container, Row, Col} from \"react-bootstrap\";\r\nimport './Home.css'\r\nimport {Card} from 'react-bootstrap';   \r\nimport NotificationSystem from 'react-notification-system';\r\nimport banner from '../../assets/images/Banner.png'\r\nimport back from '../../assets/images/back.jpg'\r\nimport AppNavbar from \"../AppNavbar/AppNavbar\";\r\nimport Home1 from './Home1'\r\nimport {Prompt, NavLink, withRouter} from 'react-router-dom';\r\nimport { loginModalOpen,loadUser } from '../../action/authActions';\r\nimport { connect } from 'react-redux';\r\nimport ApexChart from './ApexChart';\r\nimport Footer from \"../Footer/Footer\";\r\n\r\n\r\nclass Home extends Component {\r\n\r\nnotificationSystem = React.createRef();\r\naddNotification = event => {\r\n  // event.preventDefault();\r\n  const notification = this.notificationSystem.current;\r\n  notification.addNotification({\r\n    message: 'Welcome To ShopperZ Inventory Management System',\r\n    level: 'success',\r\n    autoDismiss:5\r\n  });\r\n};\r\n\r\ncomponentDidMount(e){\r\n  this.addNotification();\r\n  console.log(\"History:\",this.props.history);\r\n    if(this.props.isBlocked){\r\n          let authenticate = window.confirm(\"Are You Sure Want To Go \",this.props.history.pathname)\r\n          if(!authenticate){\r\n                  this.props.history.push(this.props.history.pathname)\r\n          }\r\n    }\r\n\r\n  var myobj = document.getElementById(\"bodyClick\");\r\n  if(myobj!==null){\r\n  document.documentElement.classList.toggle(\"nav-open\");\r\n  myobj.remove();\r\n\r\n}\r\n\r\nthis.props.loadUser();\r\n if(this.props.isAuthenticated){\r\n  //  <Redirect from='/' to='/admin/dashboard' />\r\n  // this.props.history.push('/admin/dashboard')\r\n  // this.props.loginModalOpen(false);\r\n  // ,backgroundPosition: 'center',backgroundSize: '150rem',\r\n }\r\n}\r\n  render() {\r\n    return (\r\n      <div>\r\n         <NotificationSystem ref={this.notificationSystem} />\r\n        <div className=\"App\" style={{ backgroundImage: `url(\"${back}\")`,backgroundRepeat:'no-repeat'}} >\r\n            <AppNavbar/>\r\n            <Prompt\r\n                when={this.props.isBlocked}\r\n                message={(location)=> `Are You Sure Want To Leave ${location.pathname}`}\r\n/>\r\n            <Container>\r\n          <div className=\"content\" >\r\n            <Container fluid>\r\n              <Row>\r\n              \r\n                <Col md={6} >\r\n                    <Card className=\"intro_card\">\r\n                        <div className=\"text-black mt-3 card-content\">\r\n                            <h1 className=\" mb-3 font-weight-bold\">Product Inventory Management Application</h1>\r\n                            <p>Keep calm and let statistics help you with your stocktaking process!</p><p className=\"font-size-lg text-black-50\">Use this individual application for a head start in building a product that is related to the commerce niche. This template comes with pre-built pages for orders, customers and various sales releated analytics.</p>\r\n                            <div className=\"divider border-2 border-dark my-4 border-light opacity-2 rounded-circle w-25\"></div>\r\n                                <div>\r\n                                    <NavLink style={{color:'white'}} to='/admin/dashboard' className=\"d-block d-sm-inline-block btn btn-primary btn-lg\" >\r\n                                    <span className=\"btn-wrapper--icon\">\r\n                                    </span><span className=\"btn-wrapper--label\" >Dashboard</span></NavLink>\r\n                                    <NavLink className=\"d-block d-sm-inline-block ml-0 mt-3 mt-sm-0 ml-sm-3 btn btn-outline-primary btn-lg\" to=\"/admin/products\"><span>Products Filters</span></NavLink>\r\n                                </div>\r\n                            </div>\r\n                    </Card>\r\n                </Col>\r\n                \r\n                <Col md={6}>\r\n                  <Card className='banner-card'>\r\n                      <div className='banner'>\r\n                          <img alt=\"alt\" src={banner}/>\r\n                      </div>\r\n                  </Card>\r\n                </Col>\r\n              \r\n              </Row>\r\n              \r\n            \r\n            </Container>\r\n           \r\n            \r\n      </div>\r\n      <ApexChart/>\r\n      </Container>\r\n      \r\n      \r\n      <Home1/>\r\n      </div>\r\n      <Footer/>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps=state=>{\r\n  return({\r\n    isBlocked:state.auth.isBlocked,\r\n    isAuthenticated:state.auth.isAuthenticated\r\n  })\r\n}\r\n\r\nexport default connect(mapStateToProps,{loginModalOpen,loadUser})(withRouter(Home));\r\n","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Products\\Products.js",["251","252","253","254","255"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\routes.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\categoryAction.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Navbars\\AdminNavbar.js",["256"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\index.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\types.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\errorActions.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\ApexChart.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Home\\Home1.js",["257","258","259","260","261","262","263","264"],"import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport './Home1.css'\r\nimport {Card} from 'react-bootstrap';   \r\nimport { NavLink } from 'react-router-dom';\r\nimport TrendingProductList from \"../ProductsList/TrendingProductList\";\r\n\r\nclass Home1 extends Component {\r\n  createLegend(json) {\r\n    var legend = [];\r\n    for (var i = 0; i < json[\"names\"].length; i++) {\r\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\r\n      legend.push(<i className={type} key={i} />);\r\n      legend.push(\" \");\r\n      legend.push(json[\"names\"][i]);\r\n    }\r\n    return legend;\r\n  }\r\n  render() {\r\n    return (\r\n<>\r\n<div className='App1' >\r\n\r\n        <Container>\r\n          <Row>\r\n          \r\n           \r\n            \r\n            <Col md={6}>\r\n            \r\n             <TrendingProductList/>\r\n             \r\n            </Col>\r\n            <Col md={6} >\r\n                <Card className=\"intro_card\">\r\n                    <div className=\"text-black mt-3 card-content\">\r\n                        <h1 className=\" mb-3 font-weight-bold\">A magical and revolutionary device at an unbelievable price</h1>\r\n                        <p>Fully coded, perfectly responsive on all screen sizes. Start working on your project today!</p><p className=\"font-size-lg text-black-50\">Use this individual application for a head start in building a product that is related to the commerce niche. This template comes with pre-built pages for orders, customers and various sales releated analytics.</p>\r\n                        <div className=\"divider border-2 border-dark my-4 border-light opacity-2 rounded-circle w-25\"></div>\r\n                            <div>\r\n                                <a className=\"d-block d-sm-inline-block btn btn-primary btn-lg\">\r\n                                <span className=\"btn-wrapper--icon\">\r\n                                </span><span className=\"btn-wrapper--label\"><NavLink style={{color:'white'}} to='/admin/dashboard'>Dashboard</NavLink></span></a>\r\n                                <a className=\"d-block d-sm-inline-block ml-0 mt-3 mt-sm-0 ml-sm-3 btn btn-outline-primary btn-lg\" href=\"#\"><span>Products Filters</span></a>\r\n                            </div>\r\n                        </div>\r\n                </Card>\r\n            </Col>\r\n          </Row>\r\n          </Container>\r\n          </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home1;\r\n","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\itemAction.js",["265","266"],"import  {DELETE_SELECTED_ITEM,UPDATE_ITEM,GET_ITEM,ADD_ITEM,DELETE_ITEM, ITEMS_LOAD} from './types';\r\nimport axios from 'axios';\r\n\r\nimport {returnErrors} from './errorActions';\r\n\r\n\r\nexport const getItems=()=> dispatch =>{\r\n    dispatch(setItemsLoading());\r\n\r\n    axios.get('/products').then(res=>\r\n    dispatch({\r\n        type:GET_ITEM,\r\n        payload:res.data\r\n    }))\r\n    .catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));   \r\n};\r\nexport const addItem=item=> dispatch =>{\r\n    axios.post('/add_product',item)\r\n    .then(res=>dispatch({\r\n        type:ADD_ITEM,\r\n        payload:res.data\r\n    })).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\r\n};\r\n\r\nexport const deleteItem=id=>dispatch=>{\r\n    console.log(\"Id of Item\",id);\r\n    const config={\r\n        headers:{'Content-Type':'application/json'}\r\n    }\r\n    const body=JSON.stringify({id});\r\n    console.log(\"Action Product Id\",id);\r\n    axios.post('/delete_product',body,config).then(\r\n        res=>dispatch({\r\n            type:DELETE_ITEM,\r\n            payload:id\r\n        })\r\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\r\n}\r\n\r\n\r\nexport const deleteSelectedItem=ids=>dispatch=>{\r\n    console.log(\"Id of Item\",ids);\r\n    const config={\r\n        headers:{'Content-Type':'application/json'}\r\n    }\r\n    var body=JSON.stringify({ids});\r\n    var {ids}=body\r\n    console.log(\"Action Product Id\",typeof ids);\r\n    console.log(\"Body\",body,body[0],ids);\r\n    axios.post('/delete_selected_product',body,config).then(\r\n        res=>dispatch({\r\n            type:DELETE_SELECTED_ITEM,\r\n            payload:ids\r\n        })\r\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\r\n}\r\n\r\nexport const rankItem=(id)=>dispatch=>{\r\n    const config={\r\n        headers:{'Content-Type':'application/json'}\r\n    }\r\n    const body=JSON.stringify({id});\r\n    console.log(\"Action Product Id\",id);\r\n    axios.post('/rank_product',body,config).then(\r\n        res=>dispatch({\r\n            type:UPDATE_ITEM,\r\n            payload:res.data\r\n        })\r\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\r\n}\r\n\r\nexport const updateItem=({id,name,manufacturer,description,stock,price,rating,user})=>dispatch=>{\r\n    dispatch(setItemsLoading());\r\n    console.log(\"Id of Item\",id,user);\r\n    const config={\r\n        headers:{'Content-Type':'application/json'}\r\n    }\r\n    const body=JSON.stringify({id,name,description,manufacturer,price,stock,rating,user});\r\n    console.log(\"Action Product Id\",id);\r\n    axios.post('/update_product',body,config).then(\r\n        res=>dispatch({\r\n            type:UPDATE_ITEM,\r\n            payload:res.data\r\n        })\r\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\r\n    // Wait for 1/2 Seconds \r\n    setTimeout(() => {\r\n        dispatch(getItems());\r\n    }, 500);\r\n}\r\n\r\n\r\nexport const setItemsLoading=()=>{\r\n    return{\r\n        type:ITEMS_LOAD\r\n    };\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AppNavbar\\AppNavbar.js",["267","268","269"],"import React, {Component, Fragment} from 'react';\r\nimport {Navbar, Nav,NavLink,Container,Dropdown, Button} from 'react-bootstrap';\r\nimport Logout from '../auth/Logout';\r\nimport RegisterModal from '../auth/RegisterModal1';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport avatar from '../../assets/images/avatar.png'\r\nimport logo from '../../assets/images/logo.jpg'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faCog, faUserEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport './AppNavBar.css'\r\nimport store from '../../store';\r\nimport { loadUser } from '../../action/authActions';\r\n\r\nclass AppNavbar extends Component{\r\n    componentDidMount(){\r\n        store.dispatch(loadUser());\r\n    }\r\n    state={\r\n        \r\n        dropdownOpen:false,\r\n        isOpen:false\r\n    }\r\n    static propTypes={\r\n        auth:PropTypes.object.isRequired\r\n    }\r\n    toggle=()=>{\r\n        this.setState({\r\n            isOpen:!this.state.isOpen\r\n        });\r\n    }\r\n    toggled=()=>{\r\n        this.setState({\r\n            dropdownOpen:!this.state.dropdownOpen\r\n        });\r\n    }\r\n    render(){\r\n        const {isAuthenticated, user}=this.props.auth;\r\n       \r\n        console.log(\"from Nav:\",user?user:'Hello');\r\n        const authLinks=(\r\n            <Fragment >\r\n                {/* <Nav.Item>About</Nav.Item> */}\r\n                <Nav.Item>\r\n                    \r\n                <Dropdown className=\"user-dropdown\" style={{padding:'0rem !important'}} isOpen={this.state.dropdownOpen} toggle={this.toggled}>\r\n                    \r\n                    <Dropdown.Toggle id=\"dropdown-basic\" caret>\r\n                        {user? <div className=\"user-avatar\">\r\n                        <img alt=\"alt\" className=\"avatar\" style={{width:'2rem',borderRadius:'50%'}} src={user.img?user.img:avatar} />\r\n                        <div class=\"status-overlay\">\r\n                            <i class=\"bowtie-icon bowtie-status-success success\"></i>\r\n                        </div>\r\n                        </div>:'X'}\r\n                    <div>\r\n                        <span style={{color:'red',fontWeight:400,fontSize:'80%'}}>Shop Admin</span>\r\n                        <div style={{color:'#3b3e66'}}>{user? user.fname+\" \"+user.lname:'Hello Gest'}</div>\r\n                    </div>\r\n                   \r\n                    \r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu bottom>\r\n                            <Dropdown.Item header>\r\n                            {user? <div className=\"user-avatar\">\r\n                    <img alt=\"alt\" className=\"avatar\" style={{width:'2rem',borderRadius:'50%'}} src={user.img?user.img:avatar} />\r\n                    {/* <div class=\"status-overlay\">\r\n                        <i class=\"bowtie-icon bowtie-status-success success\"></i>\r\n                    </div> */}\r\n                    </div>:'X'}\r\n                    <div>\r\n                        <span style={{color:'red',fontWeight:400,fontSize:'80%'}}>Shop Admin</span>\r\n                        <div style={{color:'#3b3e66'}}>{user? user.email:'Hello Guest'}</div>\r\n                    </div>\r\n                            </Dropdown.Item><hr/>\r\n                             <Dropdown.Item className=\"dropdown-list-nav\"> <Nav.Item  >\r\n                            <div className=\"dropdown-list-item\">\r\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faCog}/><h7>Settings</h7>    \r\n                            </div>    \r\n                    </Nav.Item></Dropdown.Item>\r\n                             <Dropdown.Item className=\"dropdown-list-nav\" href=\"/admin/user\"> <Nav.Item >\r\n                               \r\n                            <div className=\"dropdown-list-item\">\r\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faUserEdit}/><h7>Profile</h7>    \r\n                            </div>     \r\n                    </Nav.Item></Dropdown.Item>\r\n                    <Dropdown.Item> <Nav.Item ><Logout/></Nav.Item></Dropdown.Item>\r\n                   \r\n                    </Dropdown.Menu>\r\n                   \r\n                </Dropdown>\r\n   \r\n                </Nav.Item>    \r\n            </Fragment>\r\n        );\r\n        const guestLinks=(\r\n            <Fragment>\r\n                <Nav.Item>\r\n                   \r\n                    <RegisterModal/>\r\n\r\n                   \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                        <NavLink onClick={this.toggle} href='#'>\r\n                    <       Button style={{background:'#7a7b97',paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> About</b></Button>\r\n                        </NavLink>\r\n                </Nav.Item>\r\n                {/* <Nav.Item>\r\n                    <LoginModal/>\r\n                </Nav.Item> */}\r\n            </Fragment>\r\n        );\r\n        return(\r\n            <>\r\n            <div  style={{color:'#000',textDecoration:'none'}}>\r\n            <Navbar expand=\"sm\"> \r\n                <Container>\r\n                    <Navbar.Brand href=\"/\"><div className=\"nav-brand\"><img alt=\"alt\" className=\"nav-logo\" src={logo}/><div className=\"brand-text\"><span><b>inventory</b></span><b>ShopperZ</b></div></div></Navbar.Brand>\r\n                    <Navbar.Toggle onClick={this.toggle}/>\r\n                    <Navbar.Collapse className=\"mainNavCollapse\" isOpen={this.state.isOpen} navbar>\r\n                        <NavLink className=\"ml-auto\"  href='/'><b>Home</b></NavLink>\r\n                        {/* <NavLink  href='/admin/dashboard'><b>Dashboard</b></NavLink> */}\r\n                        <NavLink  href='/productsGrid'><b>Products</b></NavLink>\r\n                        <Nav  navbar>\r\n                        {isAuthenticated?authLinks:guestLinks}    \r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n       </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    auth:state.auth\r\n})\r\nexport default connect(mapStateToProps,null)(AppNavbar);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\UpdateProductModal.js",["270","271","272","273"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Sidebar\\Sidebar.jsx",["274","275"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductListPage.js",["276","277","278"],"import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { getItems,deleteItem } from \"../../action/itemAction\";\r\nimport ProductList from './ProductList';\r\n\r\n\r\nconst styles = {\r\n  mediaItem: {\r\n    border: \"1px solid gray\",\r\n    backgroundColor: \"#f5f5f5\",\r\n\r\n  },\r\n  mediaItemButtons: {\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\"\r\n  }\r\n};\r\n\r\nclass ProductListPage extends Component {\r\n  state = {\r\n    products: this.props.products,\r\n    pageOfItems: [],\r\n    Index1:0,\r\n    Index2:8,\r\n\r\n  };\r\n  \r\n\r\n  componentDidMount(){\r\n this.props.getItems()\r\n    this.setState({products:this.props.products})\r\n \r\n  }\r\n\r\n  handleView=()=>{\r\n    if(!this.props.isAuthenticated){\r\n      \r\n    }\r\n  }\r\n  onChangePage(pageOfItems) {\r\n    // update state with new page of items\r\n    this.setState({ pageOfItems: pageOfItems });\r\n\r\n}\r\n\r\n  \r\n    render(){\r\n      \r\n      const maxlimit=100;\r\n      var products=this.props.products;\r\n      \r\n      products=products.slice(this.state.Index1,this.state.Index2)\r\n     \r\n    \r\n        return (\r\n            <div>\r\n              <ProductList/>  \r\n            </div>\r\n          );\r\n    }\r\n  \r\n};\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        isLoading:state.auth.isLoading,\r\n        user:state.auth.user,\r\n        products:state.item.items,\r\n        itemsLoading:state.item.itemsLoading,\r\n        itemsLoaded:state.item.itemsLoaded\r\n        // error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{getItems,deleteItem})(ProductListPage);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\Product.js",["279","280","281","282","283","284","285","286"],"import { faArrowAltCircleDown, faCalendar, faCalendarAlt, faCalendarDay, faCartPlus, faChevronDown, faShoppingBag, faShoppingBasket, faStar, faStore, faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Accordion, Button, Card, Col, Container, Dropdown, Row } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink,useHistory,useParams } from 'react-router-dom';\r\nimport './Product.css';\r\nimport defaultPro from '../../assets/images/default-pro.jpg';\r\nimport {loginModalOpen,loadUser} from '../../action/authActions';\r\nimport {rankItem} from '../../action/itemAction';\r\n\r\nconst Product=(props)=>{\r\n    const history=useHistory();\r\n    var params=useParams();\r\n    const [product,setItem]=useState({});\r\n\r\n\r\n \r\n\r\n    useEffect(()=>{\r\n        props.loadUser();\r\n        if(!props.isAuthenticated){\r\n            console.log(\"From Product to Home\");\r\n            props.history.push('/')\r\n            props.loginModalOpen(true);\r\n           }\r\n           else{\r\n        setItem(history.location.state.item);\r\n        console.log(\"Items\",history.location.state.item);\r\n        // console.log(\"User\",history.location.state.user);\r\n        props.rankItem({id:history.location.state.item.id});\r\n    }\r\n    },[history,props.isAuthenticated]);\r\n    // useEffect(()=>{\r\n    //     //       if(parseInt(localStorage.getItem(history.location.state.item.id))!==parseInt(history.location.state.user._id)){\r\n    //             // console.log(\"User1\",history.location.state.user._id,localStorage.getItem(history.location.state.item.id));\r\n    //     //         localStorage.setItem(history.location.state.item.id,history.location.state.user._id);\r\n               \r\n    //     //     }\r\n            \r\n    //       },[]);\r\n    return(\r\n     <>\r\n        <div>\r\n            <Container style={{marginTop:'1rem'}}>\r\n                {/* <Row>\r\n                    <Card><h1>{params.name}</h1></Card>\r\n                </Row> */}\r\n                <Row>\r\n                    <Col sm={5}>\r\n\r\n                       <Card className=\"p-img-card\">\r\n                       \r\n                       <img className=\"p-img\" src={product.img?product.img:defaultPro}/>\r\n                      \r\n                        \r\n                       </Card>\r\n                       <Row>\r\n                           <div class=\"Add-to-cart-action-div\">\r\n                                <Button><FontAwesomeIcon style={{paddingRight:'.3rem'}} icon={faCartPlus}/>Add To Cart</Button>\r\n                                <Button><FontAwesomeIcon style={{paddingRight:'.3rem'}} icon={faShoppingBasket}/>Buy Now</Button>\r\n                            </div>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col sm={7}>\r\n                    <Card>\r\n                        <Container style={{padding:'1rem 2rem'}}>\r\n                            <Row>\r\n                                <span style={{color:'#3b44c1',fontSize:'.8rem'}}>{product.manufacturer}</span>\r\n                            </Row>\r\n                            <Row>\r\n                                <h3 style={{margin:'0rem'}}>{product.name}</h3 >\r\n                            </Row>\r\n                            <Row>\r\n                                <h4  style={{margin:'.5rem 0rem',fontWeight:'bold',fontSize:'400 !important'}}>₹{product.price}</h4>\r\n                            </Row>\r\n                            <Row style={{display:'flex'}}>\r\n                                <p style={{borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'.8rem'}}>{product.rating?product.rating:\"0\"} <FontAwesomeIcon  icon={faStar}/></p> <span style={{paddingLeft:'.2rem',color:'#3b44c1'}}>Ratings Out of 5</span>\r\n                            </Row>\r\n                            <Row>\r\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faShoppingBag}/><b style={{marginRight:'.2rem'}}>Available Stock:</b></h7><span style={{color:'green'}}><b>{product.stock}</b></span>\r\n                            </Row>\r\n                            <Row>\r\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faUser}/><b style={{marginRight:'.2rem'}}>Added By:</b></h7><span><b>{product.user?product.user.fname+\" \"+product.user.lname:null}</b></span>\r\n                            </Row>\r\n                            <Row>\r\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faCalendarAlt}/><b style={{marginRight:'.2rem'}}>Created Date:</b></h7><span>{product.date}</span>\r\n                            </Row>\r\n                           \r\n                        </Container>\r\n                        <hr style={{marginBottom:'0rem'}}/>\r\n                        <Container style={{padding:'1rem 2rem'}}>\r\n                            <Row>\r\n                            <Accordion defaultActiveKey=\"1\">\r\n                                \r\n                                    <Accordion.Toggle style={{curser:'pointer'}} as={Dropdown} variant=\"link\" eventKey=\"0\">\r\n                                        Description <FontAwesomeIcon icon={faChevronDown}/>\r\n                                    </Accordion.Toggle>\r\n                                   \r\n                                    <Accordion.Collapse eventKey=\"0\">\r\n                                        <p>\r\nKeep work and entertainment going with the realme C12 smartphone featuring a 6000 mAh battery. It also comes with the Super Power Saving mode that lets you use the basic features of your phone when it is low on charge. What’s more, you can capture your surroundings well with the help of the 13 MP AI triple rear camera. You can make use of the Super Nightscape mode to click stunning pictures even in low-lit conditions. {product.description}</p>\r\n                                    </Accordion.Collapse>\r\n                                \r\n                                \r\n                            </Accordion>\r\n                            </Row>\r\n                        </Container>\r\n\r\n                       </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        \r\n                        {/* <Button>Add To Cart</Button>\r\n                        <Button>Buy Now</Button> */}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n     </>   \r\n    )\r\n}\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        isAuthenticated:state.auth.isAuthenticated\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{rankItem,loadUser,loginModalOpen})(Product) ;","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\views\\Dashboard.js",["287","288","289"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\views\\UserProfile.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Customers\\CustomerList.js",["290","291","292","293","294","295","296"],"import React,{useState,useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getCustomers,deleteCustomer} from '../../action/customerAction';\r\nimport {Row,Container,Col, Spinner, Card, Button} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {  faCalendar, faEnvelope, faHome, faTrash} from '@fortawesome/free-solid-svg-icons';\r\nimport './CustomerList.css'\r\nimport AddCustomerModal from './AddCustomerModal';\r\nimport avatar from '../../assets/images/avatar.png'\r\n\r\nconst CustomerList=(props)=>{\r\n    const [customers,setCustomers]=useState([]);\r\n    useEffect(()=>{\r\n        props.getCustomers();\r\n    },[])\r\n    useEffect(()=>{\r\n        if(props.customers.length>0){\r\n            setCustomers(props.customers);\r\n            console.log(\"Customers:\",customers);\r\n        }\r\n    },[props.customers]);\r\n    return(\r\n            <div>\r\n            <Card style={{margin:'1rem',padding:'1rem'}}>\r\n        <Row style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\r\n            <Col sm={8}>\r\n                <Row>\r\n                    <Col style={{display:'flex',flexDirection:'column'}}><h7><b>Customers</b></h7><span style={{color:'gray'}}>Our Loving Customers</span></Col>\r\n                    \r\n                </Row>\r\n            </Col>\r\n            <Col sm={2}>\r\n               <AddCustomerModal/>\r\n            </Col>\r\n        </Row>\r\n    </Card>\r\n            <Container>\r\n               <Container>\r\n                   \r\n                    {props.customers.length===0?<Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" />:\r\n                   <Row>{props.customers.map((customer,key)=>(\r\n                       <>\r\n                       <div>\r\n                        <Card style={{width:'18rem',height:'11.5rem',margin:'1rem'}} key={key}>\r\n                            <Card.Header>\r\n\r\n                                <Row style={{width:'100%',display:'flex',alignItems:'center',justifyContent:'space-around'}}>{customer.img?<img alt=\"alt\" src={customer.img?customer.img:{avatar}} style={{marginRight:'1rem',textAlign:'center',color:'white',borderRadius:'50%',width:'3rem',height:'3rem',background:'#ed3f2f'}}/>:<div style={{marginRight:'1rem',textAlign:'center',padding:'.8rem',color:'white',borderRadius:'50%',width:'3rem',height:'3rem',background:'#ed3f2f'}}>{customer.fname[0]+customer.lname[0]}</div>}<h7>{customer.fname+\" \"+customer.lname}</h7><div style={{flex:1}}><Button onClick={()=>props.deleteCustomer(customer.id)} style={{float:'right'}} variant=\"danger\" size=\"sm\"><FontAwesomeIcon icon={faTrash}/></Button></div></Row>\r\n\r\n                            </Card.Header>\r\n                            <Card.Body style={{marginLeft:'1rem'}}>\r\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faEnvelope}/>{customer.email}</Row>\r\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faHome}/>{customer.address?customer.address.substring(0,25):''}...</Row>\r\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faCalendar}/>{customer.date}</Row>\r\n                            </Card.Body>\r\n                            \r\n                        </Card>\r\n                        </div>\r\n                         \r\n                         </>\r\n                   ))\r\n\r\n                    }</Row>\r\n                    \r\n                    }\r\n                    \r\n                </Container>\r\n                </Container>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        customers:state.customer.customers\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{getCustomers,deleteCustomer})(CustomerList);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\OrderList.js",["297","298","299","300","301","302","303","304","305"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Navbars\\AdminNavbarLinks.js",["306"],"\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe} from '@fortawesome/free-solid-svg-icons';\nimport './AdminNavbarLinks.css'\nimport {NavLink} from 'react-router-dom';\n\nclass AdminNavbarLinks extends Component {\n  render() {\n    const notification = (\n      <div>\n        <FontAwesomeIcon icon={faGlobe} className=\"font-size-lg icon1 \" />\n        <b className=\"caret\" />\n      </div>\n    );\n    return (\n      <>\n\n          <div style={{margin:'5px 15px'}}>\n               <li > <NavLink className=\"nav-link\" to=\"/\" >Home</NavLink></li>\n               <li ><NavLink className=\"nav-link\" to=\"/productsGrid\">Products</NavLink></li>\n             \n               <hr style={{borderColor:'white',width:'14.3rem'}}/>  </div>\n\n             \n\n      </>\n    );\n  }\n}\n\nexport default AdminNavbarLinks;\n","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\categoryReducer.js",["307"],"\r\nimport  {GET_CATEGORY,ADD_CATEGORY} from '../action/types';\r\n\r\nconst initialState={\r\n    categories:[],\r\n    // itemsLoading:false,\r\n    // itemsLoaded:false\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    const {payload}=action; //destructuring action\r\n    switch(action.type){\r\n        case GET_CATEGORY:\r\n            return{\r\n                ...state,\r\n                categories:payload,\r\n                // itemsLoading:false,\r\n                // itemsLoaded:true\r\n           };\r\n           \r\n           case ADD_CATEGORY:\r\n            return{\r\n                ...state,\r\n                categories:[...state.categories,payload]\r\n\r\n           };\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\authReducer.js",["308"],"import {BLOCK,FREE_BLOCK,LOGIN_MODAL_OPEN,LOGIN_MODAL_CLOSE,USER_LOADED,USER_LOADING,AUTH_ERROR,LOGIN_FAIL,LOGIN_SUCCESS,LOGOUT_SUCCESS,REGISTER_FAIL,REGISTER_SUCCESS,UPDATE_SUCCESS} from '../action/types';\r\nimport { EXPIRE_EXTEND } from './../action/types';\r\n\r\nconst initialState={\r\n    token:localStorage.getItem('token'),\r\n    isLoading:false,\r\n    isLoaded:false,\r\n    isAuthenticated:null,\r\n    isUpdate:null,\r\n    user:null,\r\n    isModalOpen:false,\r\n    isBlocked:false,\r\n};\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){    \r\n        case LOGIN_MODAL_OPEN:\r\n            return{\r\n                ...state,\r\n                isModalOpen:true\r\n                \r\n            };\r\n        case LOGIN_MODAL_CLOSE:\r\n            return{\r\n                ...state,\r\n                isModalOpen:false\r\n                \r\n            };\r\n        case BLOCK:\r\n            return{\r\n                ...state,\r\n                isBlocked:true\r\n                \r\n            };\r\n        case FREE_BLOCK:\r\n            return{\r\n                ...state,\r\n                isBlocked:false\r\n                \r\n            };\r\n        case USER_LOADING:\r\n            return{\r\n                ...state,\r\n                isUpdate:false,\r\n                isLoading:true,\r\n                isLoaded:false\r\n                \r\n            };\r\n        case USER_LOADED:\r\n            return{\r\n                ...state,\r\n                isAuthenticated:true,\r\n                isLoaded:true,\r\n                isLoading:false,\r\n                user:action.payload,\r\n\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token',action.payload.token);\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated:true,\r\n                isLoading:false,\r\n\r\n            };\r\n        case UPDATE_SUCCESS:\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                isUpdate:true,\r\n                isAuthenticated:true,\r\n                isLoading:false,\r\n\r\n            }; \r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS: \r\n        case REGISTER_FAIL:  \r\n        // case UPDATE_FAIL:\r\n            localStorage.removeItem('token');\r\n            return{\r\n                ...state,\r\n                token:null,\r\n                isAuthenticated:false,\r\n                isLoading:false,\r\n                user:null\r\n            };\r\n        case EXPIRE_EXTEND:\r\n            return{\r\n                ...state,\r\n                rememberMe:action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\errorReducer.js",["309"],"import  { GET_ERRORS,CLEAR_ERRORS } from '../action/types';\r\n\r\nconst initialState={\r\n    msg:{},\r\n    status:null,\r\n    id:null\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            return {\r\n                msg:action.payload.msg,\r\n                status:action.payload.status,\r\n                id:action.payload.id\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return{\r\n                msg:{},\r\n                status:null,\r\n                id:null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\itemReducer.js",["310"],"\r\nimport  {DELETE_SELECTED_ITEM,UPDATE_ITEM,GET_ITEM,ADD_ITEM,DELETE_ITEM,ITEMS_LOAD} from '../action/types';\r\n\r\nconst initialState={\r\n    items:[],\r\n    itemsLoading:false,\r\n    itemsLoaded:false\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    const {payload}=action; //destructuring action\r\n    switch(action.type){\r\n        case GET_ITEM:\r\n            return{\r\n                ...state,\r\n                items:payload,\r\n                itemsLoading:false,\r\n                itemsLoaded:true\r\n           };\r\n           case DELETE_ITEM:\r\n            return{\r\n                ...state,\r\n                items:state.items.filter(item=> item.id!==action.payload)\r\n\r\n           };\r\n           case DELETE_SELECTED_ITEM:\r\n               console.log(\"Action Payload:\",action.payload);\r\n            return{\r\n                    ...state,\r\n                    items:state.items.filter(item=> \r\n                        {\r\n                            // console.log(\"Action::\",action.payload);\r\n                            for(var id in action.payload)\r\n                            if(item.id!==id)\r\n                                return false;\r\n                            return true;\r\n                        }\r\n                 )\r\n\r\n           };\r\n           case ADD_ITEM:\r\n            return{\r\n                ...state,\r\n                items:[...state.items,payload]\r\n\r\n           };\r\n        case ITEMS_LOAD:\r\n            return{\r\n                ...state,\r\n                itemsLoading:true,\r\n                itemsLoaded:false\r\n            };\r\n            case UPDATE_ITEM:\r\n            return{\r\n                ...state,\r\n               items:state.items.map((item)=>{\r\n                   if(item.id===action.payload.id){\r\n                       const updatedItem={\r\n                           ...item,\r\n                           name:action.payload.name,\r\n                           description:action.payload.description,\r\n                           manufacturer:action.payload.manufacturer,\r\n                           price:action.payload.price,\r\n                           stock:action.payload.stock,\r\n                           rating:action.payload.rating,\r\n                           editUser:item.editUser.push(action.payload.user),\r\n                       }\r\n                       return updatedItem;\r\n                   }\r\n                   return item;\r\n               }),\r\n               itemsLoading:false,\r\n                itemsLoaded:true\r\n               \r\n\r\n            }; \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\customerReducer.js",["311"],"\r\nimport  {UPDATE_CUSTOMER,GET_CUSTOMER,ADD_CUSTOMER,DELETE_CUSTOMER, CUSTOMERS_LOAD} from '../action/types';\r\n\r\nconst initialState={\r\n    customers:[],\r\n    customersLoading:false,\r\n    customersLoaded:false\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n   \r\n    switch(action.type){\r\n        case GET_CUSTOMER:\r\n            return{\r\n                ...state,\r\n                customers:action.payload,\r\n                customersLoading:false,\r\n                customersLoaded:true\r\n           };\r\n           case DELETE_CUSTOMER:\r\n            return{\r\n                ...state,\r\n                customers:state.customers.filter(customer=> customer.id!==action.payload)\r\n\r\n           };\r\n        //    case DELETE_SELECTED_ITEM:\r\n        //        console.log(\"Action Payload:\",action.payload);\r\n        //     return{\r\n        //             ...state,\r\n        //             customers:state.customers.filter(order=> \r\n        //                 {\r\n        //                     // console.log(\"Action::\",action.payload);\r\n        //                     for(var id in action.payload)\r\n        //                     if(order.id!==id)\r\n        //                         return false;\r\n        //                     return true;\r\n        //                 }\r\n        //          )\r\n\r\n        //    };\r\n           case ADD_CUSTOMER:\r\n            return{\r\n                ...state,\r\n                customers:[...state.customers,action.payload]\r\n\r\n           };\r\n        case CUSTOMERS_LOAD:\r\n            return{\r\n                ...state,\r\n                customersLoading:true,\r\n                customersLoaded:false\r\n            };\r\n            case UPDATE_CUSTOMER:\r\n            return{\r\n                ...state,\r\n               customers:state.customers.map((order)=>{\r\n                   if(order.id===action.payload.id){\r\n                       const updatedItem={\r\n                           ...order,\r\n                           name:action.payload.name,\r\n                           description:action.payload.description,\r\n                           manufacturer:action.payload.manufacturer,\r\n                           price:action.payload.price,\r\n                           stock:action.payload.stock,\r\n                           rating:action.payload.rating,\r\n                           editUser:order.editUser.push(action.payload.user),\r\n                       }\r\n                       return updatedItem;\r\n                   }\r\n                   return order;\r\n               }),\r\n               customersLoading:false,\r\n                customersLoaded:true\r\n               \r\n\r\n            }; \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\reducer\\orderReducer.js",["312"],"\r\nimport  {UPDATE_ORDER,GET_ORDER,ADD_ORDER,DELETE_ORDER,ORDERS_LOAD} from '../action/types';\r\n\r\nconst initialState={\r\n    orders:[],\r\n    ordersLoading:false,\r\n    ordersLoaded:false\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n    const {payload}=action; //destructuring action\r\n    switch(action.type){\r\n        case GET_ORDER:\r\n            return{\r\n                ...state,\r\n                orders:payload,\r\n                ordersLoading:false,\r\n                ordersLoaded:true\r\n           };\r\n           case DELETE_ORDER:\r\n            return{\r\n                ...state,\r\n                orders:state.orders.filter(order=> order.id!==action.payload)\r\n\r\n           };\r\n        //    case DELETE_SELECTED_ITEM:\r\n        //        console.log(\"Action Payload:\",action.payload);\r\n        //     return{\r\n        //             ...state,\r\n        //             orders:state.orders.filter(order=> \r\n        //                 {\r\n        //                     // console.log(\"Action::\",action.payload);\r\n        //                     for(var id in action.payload)\r\n        //                     if(order.id!==id)\r\n        //                         return false;\r\n        //                     return true;\r\n        //                 }\r\n        //          )\r\n\r\n        //    };\r\n           case ADD_ORDER:\r\n            return{\r\n                ...state,\r\n                orders:[...state.orders,payload]\r\n\r\n           };\r\n        case ORDERS_LOAD:\r\n            return{\r\n                ...state,\r\n                ordersLoading:true,\r\n                ordersLoaded:false\r\n            };\r\n            case UPDATE_ORDER:\r\n            return{\r\n                ...state,\r\n               orders:state.orders.map((order)=>{\r\n                   if(order.id===action.payload.id){\r\n                       const updatedItem={\r\n                           ...order,\r\n                           payment:action.payload.payment,\r\n                           total:action.payload.total,\r\n                           quantity:action.payload.quantity,\r\n                        \r\n                       }\r\n                       return updatedItem;\r\n                   }\r\n                   return order;\r\n               }),\r\n               ordersLoading:false,\r\n                ordersLoaded:true\r\n               \r\n\r\n            }; \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\Logout.js",["313","314"],"import React, { Component,Fragment } from 'react'\r\nimport {logout} from '../../action/authActions';\r\nimport {connect} from 'react-redux';\r\nimport { NavLink } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt, faUserEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Logout extends Component {\r\n    static propTypes={\r\n        logout:PropTypes.func.isRequired\r\n    };\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"dropdown-list-item-logout\" onClick={this.props.logout}>\r\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faSignOutAlt}/><h7>Logout</h7>    \r\n                            </div> \r\n                {/* <NavLink style={{color:'red'}} onClick={this.props.logout} href=\"#\">Logout</NavLink> */}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,\r\n    {logout}\r\n    )(Logout);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\LoginModal.js",["315","316","317"],"import React,{Component} from 'react';\r\nimport {Col, Alert,NavLink, Button, Modal,Form,FormGroup,Label, Input, InputGroup} from 'react-bootstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {login} from '../../action/authActions';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport back from '../../assets/images/back.jpg';\r\n\r\n// import e from 'express';\r\nconst schema = yup.object({\r\n    email: yup.string().required(),\r\n    password: yup.string().required(),\r\n})\r\n\r\nclass LoginModal extends Component{\r\n    state={\r\n        modal:false,   // modal for adding item is false initially\r\n        msg:null\r\n    };\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"LOGIN_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        // if authenticated close Modal\r\n        if(this.state.modal){\r\n            \r\n            if(isAuthenticated){\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    static propTypes={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        login:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n        console.log(this.state.modal)\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n    }\r\nrender(){\r\n    return(\r\n        <div>\r\n            <NavLink onClick={this.toggle} href=\"#\">\r\n                Login\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n\r\n\r\n\r\n\r\n\r\n    <Formik\r\n      validationSchema={schema}\r\n     \r\n\r\n      initialValues={{\r\n        email:'',\r\n        password:'',\r\n\r\n      }}\r\n      onSubmit={(values)=>{ console.log(\"onSUbmit\");\r\n      const {email,password}=values;\r\n      console.log(\"On Submit Called\",email);\r\n      const user={\r\n          email,password\r\n      }\r\n      this.props.login(user);\r\n    }\r\n    }\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          \r\n          <Form.Row>\r\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormikemail\">\r\n              <Form.Label>Email ID</Form.Label>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Email ID\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.email}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.email}\r\n                </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.password}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.password}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n          {/* <Form.Group>\r\n            <Form.Check\r\n              required\r\n              name=\"terms\"\r\n              label=\"Agree to terms and conditions\"\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.terms}\r\n              feedback={errors.terms}\r\n              id=\"validationFormik0\"\r\n            />\r\n          </Form.Group> */}\r\n          <Button type=\"submit\">Login</Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{login,clearErrors})(LoginModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\RegisterModal.js",["318","319"],"import React,{Component} from 'react';\r\nimport { Button,InputGroup,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {register,login,TokenExpireExtend,loginModalOpen} from '../../action/authActions';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport back from '../../assets/images/back.jpg';\r\n\r\n\r\nconst schemaLogin = yup.object({\r\n    email: yup.string().email('Invalid email').required(),\r\n    password: yup.string().min(0, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\r\n})\r\nconst schemaRegister = yup.object({\r\n    name:yup.string().min(3, 'Name must be at least 3 characters').max(24, 'Password can be maximum 20 characters').required(),   \r\n    email: yup.string().email('Invalid email').required(),\r\n    password: yup.string().min(6, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\r\n})\r\n\r\n\r\n\r\nclass RegisterModal extends Component{\r\n    state={\r\n        imageURL:\"\",\r\n        signIn:false,\r\n        remember:false,\r\n        modal:this.props.isModalOpen,   // modal for adding item is false initially\r\n        msg:null\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"REGISTER_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else if(error.id===\"LOGIN_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        // if authenticated close Modal\r\n        if(this.state.modal){\r\n            \r\n            if(isAuthenticated){\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    static propTypes={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        register:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n        // this.props.loginModalOpen(this.state.modal)\r\n    }\r\n\r\n    handleCheckboxChange=(e)=>{\r\n        e.preventDefault();\r\n        this.setState((prevState)=>{\r\n            return {remember:!prevState.remember}\r\n        })\r\n        \r\n    }\r\n\r\n    handleSignIn=()=>{\r\n        console.log(\"Sign in  Toggle Called\",this.state.signIn);\r\n        this.props.clearErrors();\r\n        this.setState((prevState)=>{\r\n            return {signIn:!prevState.signIn}\r\n        })\r\n    }\r\n     encodeImageFileAsURL=()=> {\r\n        console.log(\"image uploading func. called\");\r\n        var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n        if (filesSelected.length > 0) {\r\n          var fileToLoad = filesSelected[0];\r\n    \r\n          var fileReader = new FileReader();\r\n    \r\n          fileReader.onload = (fileLoadedEvent)=> {\r\n            var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n    \r\n            var newImage = document.createElement('img');\r\n            newImage.src = srcData;\r\n            this.setState({imageURL:newImage.src});\r\n            // document.getElementById(\"imgTest\").innerHTML = newImage.outerHTML;\r\n            // alert(\"Converted Base64 version is \" + document.getElementById(\"imgTest\").innerHTML);\r\n            // console.log(\"Converted Base64 version is \" + this.state.imageURL);\r\n           \r\n          }\r\n          fileReader.readAsDataURL(fileToLoad);\r\n        }\r\n        // return newImage.src;\r\n      }\r\n\r\n\r\nrender(){\r\n    return(\r\n        <div>\r\n            <NavLink onClick={this.toggle} href=\"#\">\r\n               <Button style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> Register</b></Button>\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n            {this.state.signIn?           <>\r\n            {/* <Modal.Header toggle={this.toggle}>Register</Modal.Header> */}\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Register</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n\r\n    <Formik\r\n    // validator={() => ({})}\r\n      validationSchema={schemaRegister}\r\n      initialValues={{\r\n        name:'',\r\n        email:'',\r\n        password:'',\r\n\r\n      }}\r\n      onSubmit={(values)=>{ \r\n        this.encodeImageFileAsURL();\r\n        const imageURL=this.state.imageURL;\r\n        console.log(\"Image URL\",imageURL);\r\n        const {name,email,password}=values;\r\n        let img=this.state.imageURL;\r\n        const newUser={\r\n            name,email,password,img\r\n        }\r\n        this.props.register(newUser);\r\n    }\r\n    }\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n                name=\"name\"\r\n                value={values.name}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.name}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.name}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n          <Form.Row>\r\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n              <Form.Label>Email ID</Form.Label>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Email ID\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.email}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.email}\r\n                </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.password}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.password}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\">\r\n                <div className=\"mb-3\">\r\n                    <Form.File id=\"formcheck-api-regular\">\r\n                    <Form.File.Label>Profile Image</Form.File.Label>\r\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                    </Form.File>\r\n                </div>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n          <Button type=\"submit\">Register</Button>\r\n          <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\r\n                            <div style={{}} className=\"forgot-password text-right\">\r\n                                Already registered <span onClick={this.handleSignIn} ><a href=\"#\"><b>Sign in?</b></a></span>\r\n                            </div>\r\n                            <div id=\"imgTest\"></div>\r\n                        </Form>\r\n                        \r\n                    )}\r\n                    </Formik>\r\n                </Modal.Body>            </>:\r\n                <>\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\r\n                    <Modal.Body>\r\n                      {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n                       \r\n                       \r\n                 <Formik\r\n                        validationSchema={schemaLogin}\r\n                        initialValues={{\r\n                            email:'',\r\n                            password:'',\r\n\r\n                        }}\r\n                        onSubmit={(values)=>{ \r\n                            console.log(\"onSUbmit\");\r\n                        const {email,password}=values;\r\n                        console.log(\"On Submit Called\",email);\r\n                        const user={\r\n                            email,password\r\n                        }\r\n                        this.props.login(user);\r\n                        }\r\n                        }\r\n                        >\r\n                        {({\r\n                            handleSubmit,\r\n                            handleChange,\r\n                            values,\r\n                            errors,\r\n                            touched\r\n                            }) => (\r\n                            <Form noValidate onSubmit={handleSubmit}>\r\n                            \r\n                            \r\n                            <Form.Row>\r\n                            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n                                <Form.Label>Email ID</Form.Label>\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email ID\"\r\n                                    aria-describedby=\"inputGroupPrepend\"\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    isInvalid={!!errors.email}\r\n                                    />\r\n                                     <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                    {touched.email && errors.email}\r\n                                    </Form.Control.Feedback>\r\n                                   \r\n                                </InputGroup>\r\n                                </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                \r\n                                <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    isInvalid={!!errors.password}\r\n                                />\r\n                                 <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {touched.password && errors.password}\r\n                                </Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                            </Form.Row>\r\n                            {/* <Form.Group>\r\n                                <Form.Check\r\n                                required\r\n                                name=\"terms\"\r\n                                label=\"Agree to terms and conditions\"\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.terms}\r\n                                feedback={errors.terms}\r\n                                id=\"validationFormik0\"\r\n                                />\r\n                            </Form.Group> */}\r\n                            <Button type=\"submit\">Login</Button>\r\n                            <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\r\n                                                    <div style={{marginTop:'1rem',}} className=\"forgot-password text-right\">\r\n                                                    Don't have an account?  <span onClick={this.handleSignIn} ><a href=\"#\"><b>Create an Account</b></a></span>\r\n                                    </div> \r\n                            </Form>\r\n                        )}\r\n                        </Formik>\r\n                </Modal.Body>\r\n            </>\r\n            \r\n }\r\n            \r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        isModalOpen:state.auth.isModalOpen,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        rememberMe:state.auth.rememberMe,\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{loginModalOpen,login,register,clearErrors,TokenExpireExtend})(RegisterModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\TrendingProductList.js",["320","321","322","323","324","325"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\auth\\RegisterModal1.js",["326","327","328"],"import React,{Component} from 'react';\r\nimport { Button,InputGroup,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {register,login,TokenExpireExtend,loginModalOpen,isBlockedF} from '../../action/authActions';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport back from '../../assets/images/back.jpg';\r\n\r\n\r\nconst schemaLogin = yup.object({\r\n    email: yup.string().email('Invalid email').required(),\r\n    password: yup.string().min(0, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\r\n})\r\n\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n\r\n\r\nconst schemaRegister = yup.object({\r\n    fname:yup.string().min(1, 'At least 1 characters').max(10, 'First Name can be maximum 10 characters').required(),   \r\n    lname:yup.string().min(1, 'At least 1 characters').max(10, 'Last Name can be maximum 10 characters').required(),   \r\n    city:yup.string().min(3, 'City must be at least 3 characters').max(24, 'City can be maximum 20 characters'),   \r\n    state:yup.string().min(3, 'State must be at least 3 characters').max(24, 'State can be maximum 20 characters'),   \r\n    country:yup.string().min(3, 'Country must be at least 3 characters').max(24, 'Country can be maximum 20 characters'),   \r\n    postal:yup.number().integer(),   \r\n    email: yup.string().email('Invalid email').required(),\r\n    password: yup.string().min(6, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required(),\r\n    // mobile_number:yup.number().max(9999999999,'Invalid Number').required()//.matches(phoneRegExp,\"Number is Not Like Mobile number\"),   \r\n})\r\n\r\n\r\n\r\nclass RegisterModal extends Component{\r\n    state={\r\n        imageURL:\"\",\r\n        signIn:false,\r\n        remember:false,\r\n        modal:this.props.isModalOpen,   // modal for adding item is false initially\r\n        msg:null,\r\n        city:'',\r\n        State:'',\r\n        country:'',\r\n        postal:'',\r\n        ip:'',\r\n        isBlocking:this.props.isBlocked\r\n    };\r\n\r\n\r\nasync componentDidMount(){\r\n\r\n    let response=await fetch(`https://geolocation-db.com/json/`)\r\n    let ipData=await response.json();\r\n    \r\n    this.setState({ip:ipData.IPv4,city:ipData.city,country:ipData.country_name,postal:ipData.postal,State:ipData.state})\r\n\r\n    \r\n}\r\n\r\n\r\n    componentDidUpdate(prevProps){\r\n\r\n        console.log(this.state.city);\r\n\r\n        const {error,isAuthenticated}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"REGISTER_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else if(error.id===\"LOGIN_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        // if authenticated close Modal\r\n        if(this.state.modal){\r\n            \r\n            if(isAuthenticated){\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    static propTypes={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        register:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n      \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n        // this.props.loginModalOpen(this.state.modal)\r\n    }\r\n\r\n    handleCheckboxChange=(e)=>{\r\n        e.preventDefault();\r\n        this.setState((prevState)=>{\r\n            return {remember:!prevState.remember}\r\n        })\r\n        \r\n    }\r\n\r\n    handleSignIn=()=>{\r\n        console.log(\"Sign in  Toggle Called\",this.state.signIn);\r\n        this.props.clearErrors();\r\n        this.setState((prevState)=>{\r\n            return {signIn:!prevState.signIn}\r\n        })\r\n    }\r\n     encodeImageFileAsURL=()=> {\r\n        console.log(\"image uploading func. called\");\r\n        var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n        if (filesSelected.length > 0) {\r\n          var fileToLoad = filesSelected[0];\r\n    \r\n          var fileReader = new FileReader();\r\n    \r\n          fileReader.onload = (fileLoadedEvent)=> {\r\n            var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n    \r\n            var newImage = document.createElement('img');\r\n            newImage.src = srcData;\r\n            this.setState({imageURL:newImage.src});\r\n            // document.getElementById(\"imgTest\").innerHTML = newImage.outerHTML;\r\n            // alert(\"Converted Base64 version is \" + document.getElementById(\"imgTest\").innerHTML);\r\n            // console.log(\"Converted Base64 version is \" + this.state.imageURL);\r\n           \r\n          }\r\n          fileReader.readAsDataURL(fileToLoad);\r\n        }\r\n        // return newImage.src;\r\n      }\r\n\r\n\r\nrender(){\r\n    return(\r\n        <div>\r\n          {/* <Prompt\r\n              when={this.state.isBlocking}\r\n                message={(location, action) => {\r\n                  // if (action === 'POP') {\r\n                    console.log(\"Backing up...\",action,location)\r\n                  // }\r\n\r\n                  return location.pathname.startsWith(\"/\")\r\n                    ? true\r\n                    : `Are you sure you want to Leave ${location.pathname}?`\r\n            }}\r\n          /> */}\r\n             {/* <Prompt\r\n                when={this.props.isBlocked}\r\n                message={(location)=> `Are You Sure Want To Leave ${location}`}\r\n/>  */}\r\n            <NavLink onClick={this.toggle} >\r\n               <Button style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> Register</b></Button>\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n            {this.state.signIn?           <>\r\n            {/* <Modal.Header toggle={this.toggle}>Register</Modal.Header> */}\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Register</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n    <p>isBlocking?{this.state.isBlocking?\"Yes\":\"No\"}</p>\r\n   \r\n    <Formik\r\n    // validator={() => ({})}\r\n      validationSchema={schemaRegister}\r\n      initialValues={{\r\n        fname:'',\r\n        lname:'',\r\n        email:'',\r\n        password:'',\r\n        city:this.state.city,\r\n        state:this.state.State,\r\n        postal:this.state.postal,\r\n        country:this.state.country,\r\n        // mobile_number:''\r\n\r\n      }}\r\n      onSubmit={(values)=>{ \r\n        this.encodeImageFileAsURL();\r\n        const imageURL=this.state.imageURL;\r\n        console.log(\"Image URL\",imageURL);\r\n        const {fname,lname,email,password,city,state,postal,country}=values;\r\n        let img=this.state.imageURL;\r\n        let ip=this.state.ip;\r\n        const newUser={\r\n            fname,lname,email,password,img,city,state,postal,country,ip\r\n        }\r\n        this.props.register(newUser);\r\n    }\r\n    }\r\n    >\r\n       \r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n           \r\n              <Form.Label>First Name</Form.Label>\r\n              \r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"First Name\"\r\n                name=\"fname\"\r\n                value={values.fname}\r\n                // onChangeCapture={(e)=>this.setState({isBlocking:e.target.value>0})}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\r\n                isInvalid={!!errors.fname}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.fname}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Last Name\"\r\n                name=\"lname\"\r\n                value={values.lname}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); this.props.isBlockedF(e.target.value.length>0);handleChange(e)}}\r\n                isInvalid={!!errors.lname}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.lname}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n           \r\n\r\n          </Form.Row>\r\n          <Form.Row>\r\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n              <Form.Label>Email ID</Form.Label>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Email ID\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"email\"\r\n                  value={values.email}\r\n                  onChange={e=>{this.setState({isBlocking:e.target.value.length>0});this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\r\n                  isInvalid={!!errors.email}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.email}\r\n                </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                value={values.password}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0});this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\r\n                isInvalid={!!errors.password}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.password}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n         \r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n              <Form.Label>City</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"City\"\r\n                name=\"city\"\r\n                value={values.city?values.city:this.state.city}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                isInvalid={!!errors.city}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.city}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n              <Form.Label>State</Form.Label>\r\n              <Form.Control\r\n               disabled\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                name=\"state\"\r\n                value={values.state?values.state:this.state.State}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                isInvalid={!!errors.state}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.state}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n              <Form.Label>Postal</Form.Label>\r\n              <Form.Control\r\n             \r\n                type=\"number\"\r\n                placeholder=\"Postal\"\r\n                name=\"postal\"\r\n                value={values.postal?values.postal:this.state.postal}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                isInvalid={!!errors.postal}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.postal}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n              <Form.Label>Country</Form.Label>\r\n              <Form.Control\r\n               disabled\r\n                type=\"text\"\r\n                placeholder=\"Country\"\r\n                name=\"country\"\r\n                value={values.country?values.country:this.state.country}\r\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                isInvalid={!!errors.country}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.country}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            {/* <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Phone/Mobile Number</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Mobile Number\"\r\n                name=\"mobile\"\r\n                value={values.mobile_number}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.mobile_number}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.mobile_number}\r\n              </Form.Control.Feedback>\r\n            </Form.Group> */}\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\">\r\n                <div className=\"mb-3\">\r\n                    <Form.File id=\"formcheck-api-regular\">\r\n                    <Form.File.Label>Profile Image </Form.File.Label>\r\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                    </Form.File>\r\n                </div>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n\r\n          {/* <Form.Row>\r\n          <Map\r\n                google={this.props.google}\r\n                center={{lat: 18.5204, lng: 73.8567}}\r\n                height='300px'\r\n                zoom={15}\r\n    />\r\n          </Form.Row>\r\n          <Form.Row>\r\n         \r\n          </Form.Row>\r\n          <Form.Row>\r\n         \r\n          </Form.Row>\r\n          <Form.Row style={{marginBottom:'10rem'}}>\r\n         <p>Hello</p>\r\n          </Form.Row> */}\r\n          <Button type=\"submit\">Register</Button>\r\n          \r\n          <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\r\n                            <div style={{}} className=\"forgot-password text-right\">\r\n                                Already registered <span onClick={this.handleSignIn} ><a ><b>Sign in?</b></a></span>\r\n                            </div>\r\n                            <div id=\"imgTest\"></div>\r\n                        </Form>\r\n                        \r\n                    )}\r\n                    </Formik>\r\n                </Modal.Body>            </>:\r\n                <>\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\r\n                    <Modal.Body>\r\n                      {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n                       \r\n                       \r\n                 <Formik\r\n                        validationSchema={schemaLogin}\r\n                        initialValues={{\r\n                            email:'',\r\n                            password:'',\r\n\r\n                        }}\r\n                        onSubmit={(values)=>{ \r\n                            console.log(\"onSUbmit\");\r\n                        const {email,password}=values;\r\n                        console.log(\"On Submit Called\",email);\r\n                        const user={\r\n                            email,password\r\n                        }\r\n                        this.props.login(user);\r\n                        }\r\n                        }\r\n                        >\r\n                        {({\r\n                            handleSubmit,\r\n                            handleChange,\r\n                            values,\r\n                            errors,\r\n                            touched\r\n                            }) => (\r\n                            <Form noValidate onSubmit={handleSubmit}>\r\n                            \r\n                            \r\n                            <Form.Row>\r\n                            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n                                <Form.Label>Email ID</Form.Label>\r\n                                <InputGroup>\r\n                                    <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email ID\"\r\n                                    aria-describedby=\"inputGroupPrepend\"\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                                    isInvalid={!!errors.email}\r\n                                    />\r\n                                     <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                    {touched.email && errors.email}\r\n                                    </Form.Control.Feedback>\r\n                                   \r\n                                </InputGroup>\r\n                                </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                \r\n                                <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                                    isInvalid={!!errors.password}\r\n                                />\r\n                                 <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {touched.password && errors.password}\r\n                                </Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                            </Form.Row>\r\n                            {/* <Form.Group>\r\n                                <Form.Check\r\n                                required\r\n                                name=\"terms\"\r\n                                label=\"Agree to terms and conditions\"\r\n                                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                                isInvalid={!!errors.terms}\r\n                                feedback={errors.terms}\r\n                                id=\"validationFormik0\"\r\n                                />\r\n                            </Form.Group> */}\r\n                            <Button type=\"submit\">Login</Button>\r\n                            <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\r\n                                                    <div style={{marginTop:'1rem',}} className=\"forgot-password text-right\">\r\n                                                    Don't have an account?  <span onClick={this.handleSignIn} ><a ><b>Create an Account</b></a></span>\r\n                                    </div> \r\n                            </Form>\r\n                        )}\r\n                        </Formik>\r\n                </Modal.Body>\r\n            </>\r\n            \r\n }\r\n            \r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        isModalOpen:state.auth.isModalOpen,\r\n        isBlocked:state.auth.isBlocked,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        rememberMe:state.auth.rememberMe,\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{loginModalOpen,isBlockedF,login,register,clearErrors,TokenExpireExtend})(RegisterModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Card\\Card.js",["329"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport class Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\r\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")}>\r\n          <h4 style={{color:'#3b44c1',fontWeight:'400'}} className=\"title\"><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={this.props.icon}/>{this.props.title}</h4>\r\n          <p className=\"category\">{this.props.category}</p>\r\n        </div>\r\n        <div\r\n          className={\r\n            \"content\" +\r\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\r\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\r\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\r\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\r\n          }\r\n        >\r\n          {this.props.content}\r\n\r\n          <div className=\"footer\">\r\n            {this.props.legend}\r\n            {this.props.stats != null ? <hr /> : \"\"}\r\n            <div className=\"stats\">\r\n              <i className={this.props.statsIcon} /> {this.props.stats}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\StatsCard\\StatsCard.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\UserCard\\UserCard.jsx",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Variables\\Variables.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\CustomButton\\CustomButton.jsx",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductList.js",["330","331","332","333"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\orderAction.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\action\\customerAction.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Customers\\AddCustomerModal.js",["334","335","336","337","338","339"],"import React,{Component} from 'react';\r\nimport {Col, Alert,NavLink, Button, Modal,Form, InputGroup} from 'react-bootstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {addItem} from '../../action/itemAction';\r\nimport {getCategories} from '../../action/categoryAction';\r\n\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport back from '../../assets/images/back.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport {addCustomer,getCustomers} from '../../action/customerAction';\r\n\r\n\r\n// import e from 'express';\r\nconst schemaCustomer = yup.object({\r\n    fname: yup.string().min(3, 'First Name must be at least 3 characters').max(24, 'Last Name can be maximum 20 characters').required(),\r\n    lname: yup.string().min(3, 'Last Name must be at least 3 characters').max(24, 'Last Name can be maximum 20 characters').required(),\r\n    address: yup.string().max(100,\"Address length must be less than 100 Chars\").required(),\r\n    email: yup.string().email('Invalid email').required(),\r\n})\r\n\r\nclass AddCustomerModal extends Component{\r\n    state={\r\n        modal:false,   // modal for adding item is false initially\r\n        msg:null,\r\n        imageURL:'',\r\n        categories:this.props.categories\r\n    };\r\n    componentDidMount(){\r\n      // this.props.getCategories();\r\n      this.setState({categories:this.props.categories})\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"LOGIN_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        \r\n    }\r\n    static propTypes={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        login:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n        console.log(this.state.modal)\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n    }\r\n\r\n\r\n    encodeImageFileAsURL=()=> {\r\n      console.log(\"image uploading func. called\");\r\n      var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n      if (filesSelected.length > 0) {\r\n        var fileToLoad = filesSelected[0];\r\n  \r\n        var fileReader = new FileReader();\r\n  \r\n        fileReader.onload = (fileLoadedEvent)=> {\r\n          var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n  \r\n          var newImage = document.createElement('img');\r\n          newImage.src = srcData;\r\n          this.setState({imageURL:newImage.src});\r\n          // console.log(\"ImageURL:\",this.state.imageURL);\r\n         \r\n        }\r\n        fileReader.readAsDataURL(fileToLoad);\r\n      }\r\n\r\n    }\r\nrender(){\r\n  console.log(\"Categories:\",this.state.categories);\r\n    return(\r\n        <div>\r\n             <NavLink onClick={this.toggle} href=\"#\">\r\n            <Button><FontAwesomeIcon  icon={faPlus}/><h7 style={{marginLeft:'.3rem'}} className=\"newproductbuttontext\">Add New</h7></Button>\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Add Customer</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n\r\n\r\n\r\n\r\n\r\n    <Formik\r\n      validationSchema={schemaCustomer}\r\n     \r\n\r\n      initialValues={{\r\n        fname:\"\",\r\n        lname:\"\",\r\n        email:\"\",\r\n        address:\"\",\r\n        img:\"\"\r\n      }}\r\n      onSubmit={(values)=>{ \r\n       \r\n        const {fname,lname,address,email}=values;\r\n        // this.encodeImageFileAsURL();   \r\n        let img=this.state.imageURL;\r\n        console.log(\"Image:\",img);\r\n        const by_user_id=this.props.user?this.props.user._id:'';\r\n        const customer={\r\n          fname,lname,email,address,img,by_user_id\r\n        }\r\n        console.log(\"New Customer:\",customer);\r\n      //  console.log(\"Name:\",name,\" Des:\",description,\" Manu:\",manufacturer,\" price:\",price,\" Stock:\",stock,\" Img:\",img,\"  Cat\",CategoryName,\" User:\",user);\r\n        this.props.addCustomer(customer);\r\n        \r\n        this.toggle();\r\n        setTimeout(()=>{\r\n            this.props.getCustomers();\r\n        },1000);\r\n       }\r\n     }\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          \r\n          <Form.Row>\r\n          <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n              <Form.Label>First Name</Form.Label>\r\n              \r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"First Name\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"fname\"\r\n                  value={values.fname}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.fname}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.fname}\r\n                </Form.Control.Feedback>\r\n              \r\n            </Form.Group>\r\n          <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              \r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Last  Name\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"lname\"\r\n                  value={values.lname}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.lname}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.lname}\r\n                </Form.Control.Feedback>\r\n              \r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n              <Form.Label>Email</Form.Label>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.email}\r\n              />\r\n\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.email}\r\n              </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Address</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Address\"\r\n                name=\"address\"\r\n                value={values.address}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.address}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.address}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n\r\n            <Form.Row>\r\n\r\n            <Form.Group as={Col} md=\"7\" controlId=\"validationFormik07\">\r\n                <div className=\"mb-3\">\r\n                    <Form.File id=\"formcheck-api-regular\">\r\n                    <Form.File.Label>Customer Image</Form.File.Label>\r\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                    </Form.File>\r\n                </div>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n          \r\n          <Button type=\"submit\">Submit</Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        categories:state.category.categories,\r\n        user:state.auth.user,\r\n     \r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{getCustomers,clearErrors,addItem,getCategories,addCustomer})(AddCustomerModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\AddOrderModal.js",["340"],"import React,{Component} from 'react';\r\nimport { Button,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nimport back from '../../assets/images/back.jpg';\r\nimport {loadUser} from '../../action/authActions'\r\nimport {getItems} from '../../action/itemAction';\r\nimport {addOrder,getOrders} from '../../action/orderAction';\r\nimport {getCustomers} from '../../action/customerAction';\r\nimport {getCategories} from '../../action/categoryAction';\r\n\r\n\r\n\r\nconst schemaOrder = yup.object({\r\n    customer_id: yup.number().positive().integer().min(1,\"Choose Any Customer\"),\r\n    category_id: yup.number().positive().integer().min(1,\"Choose Any Category\"),\r\n    product_id: yup.string().min(9,\"Choose Any Product\"),\r\n    payment1: yup.number().positive().integer().min(1,\"Choose Any Payment Status\"),\r\n    quantity:yup.number().integer().min(1,\"Choose Atleast One Quantity\").max(100,'Max 100 Allowed/Order'),   \r\n    // total:yup.number().integer().min(1,\"Choose Any Product\")\r\n          \r\n})\r\n\r\n\r\n\r\nclass AddOrderModal extends Component{\r\n    state={\r\n       \r\n        modal:false,   // modal for adding item is false initially\r\n        msg:null,   \r\n    };\r\n\r\n    componentDidMount(){\r\n      this.props.getCustomers();\r\n      this.props.getCategories();\r\n      this.props.getItems();\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n\r\n        console.log(\"Add Order Called\");\r\n        const {error}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"UPDATE_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        // if authenticated close Modal\r\n        // if(this.state.modal){\r\n            \r\n        //     if(isAuthenticated){\r\n        //         this.toggle();\r\n        //     }\r\n        // }\r\n    }\r\n    static propTypes={\r\n        error:PropTypes.object.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n   toggle=()=>{   \r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n        console.log(\"Toggle:\",this.state.modal);\r\n        \r\n    }\r\n    \r\n\r\nrender(){\r\n\r\n  \r\n  \r\n  var customers=this.props.customers.length===0?[]:this.props.customers;\r\n  var products=this.props.products.length===0?[]:this.props.products;\r\n  var categories=this.props.categories.length===0?[]:this.props.categories;\r\n  \r\nconst  getCategory=(id)=>{\r\n      return categories.filter(cat=>cat.id===parseInt(id))[0].name;\r\n  }\r\n  // console.log(\"Category:\",getCategory(\"1254\"));\r\nconst getProducts=(id,products)=>{\r\n  if(id===\"0\")\r\n  return [];\r\n  let cat_name=getCategory(id);\r\n  return products.filter(p=>p.category===cat_name)\r\n}\r\n\r\nconst getPrice=(id)=>{\r\n  if(id!=='0'){\r\n    return products.filter(p=>p.id===id)[0].price;\r\n  }\r\n  return 0;\r\n}\r\n\r\nconsole.log(\"User:\",this.props.user);\r\n    return(\r\n        <div>\r\n          {/* <Prompt\r\n              when={this.state.isBlocking}\r\n                message={(location, action) => {\r\n                  // if (action === 'POP') {\r\n                    console.log(\"Backing up...\",action,location)\r\n                  // }\r\n\r\n                  return location.pathname.startsWith(\"/\")\r\n                    ? true\r\n                    : `Are you sure you want to Leave ${location.pathname}?`\r\n            }}\r\n          /> */}\r\n             {/* <Prompt\r\n                when={this.props.isBlocked}\r\n                message={(location)=> `Are You Sure Want To Leave ${location}`}\r\n/>  */}\r\n            <NavLink href=\"#\" onClick={this.toggle} >\r\n               <Button  style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b>Add Order</b></Button>\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Add Order</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n   \r\n    <Formik\r\n      validationSchema={schemaOrder}\r\n      initialValues={{\r\n        customer_id:'0',\r\n        product_id:'0',\r\n        quantity:0,\r\n        total:0,\r\n        category_id:'0',\r\n        payment1:'0'\r\n\r\n      }}\r\n      onSubmit={(values)=>{ \r\n        \r\n        const {product_id,customer_id,quantity,payment1}=values;\r\n        let by_user_id=this.props.user?this.props.user._id:9;\r\n        let payment=parseInt(payment1)===1?\"Completed\":\"Pending\";\r\n        let total=quantity*getPrice(product_id)\r\n        console.log(product_id,customer_id,by_user_id,quantity,total,payment);\r\n        const newOrder={\r\n          product_id,customer_id,by_user_id,quantity,total,payment\r\n        }\r\n        this.props.addOrder(newOrder);\r\n        this.toggle();\r\n        setTimeout(()=>{\r\n          this.props.getOrders();\r\n        },1500)\r\n    }\r\n    }\r\n    >\r\n       \r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\">\r\n           \r\n              <Form.Label>Customer</Form.Label>\r\n              \r\n              <Form.Control\r\n                as=\"select\"\r\n                // type=\"password\"\r\n                placeholder=\"\"\r\n                name=\"customer_id\"\r\n                value={values.customer_id}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.customer_id}\r\n                \r\n              >\r\n                  <option value='0'>Choose Customer</option>\r\n\r\n                  {this.props.customers.map((customer,key)=>(\r\n                      <option value={customer.id}>{customer.fname+\" \"+customer.lname}</option>\r\n                  ))\r\n                        \r\n                  }\r\n                \r\n        \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.customer_id}\r\n              </Form.Control.Feedback>\r\n\r\n\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\">\r\n             <Form.Label>Category</Form.Label>\r\n              \r\n              <Form.Control\r\n                as=\"select\"\r\n                // type=\"password\"\r\n                placeholder=\"\"\r\n                name=\"category_id\"\r\n                value={values.category_id}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.category_id}\r\n                \r\n              >\r\n                  <option value=\"0\">Choose Category</option>\r\n\r\n                  {categories.map((category,key)=>(\r\n                      <option value={category.id}>{category.name}</option>\r\n                  ))\r\n                        \r\n                  }\r\n                \r\n        \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.category_id}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n           \r\n\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n         <Form.Group as={Col} md=\"12\">\r\n             <Form.Label>Product Under Choosen Category</Form.Label>\r\n              \r\n              <Form.Control\r\n                as=\"select\"\r\n                placeholder=\"\"\r\n                name=\"product_id\"\r\n                value={values.product_id}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.product_id}\r\n              >\r\n                  <option value=\"0\">Choose Product</option>\r\n                  {getProducts(values.category_id,products).map((product,key)=>(\r\n                      <option style={{fontWeight:'bold'}} value={product.id}> #{key+1} | {product.name} | Price: ₹{product.price} | Stock: {product.stock}</option>\r\n                  ))\r\n                        \r\n                  }\r\n                \r\n        \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.product_id}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n         <Form.Group as={Col} md=\"6\">\r\n             <Form.Label>Quantity</Form.Label>\r\n              \r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Quantity\"\r\n                name=\"quantity\"\r\n                value={values.quantity}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.quantity}\r\n              >\r\n                  \r\n                \r\n        \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.quantity}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n         <Form.Group as={Col} md=\"6\">\r\n             <Form.Label>Total</Form.Label>\r\n              \r\n              <Form.Control\r\n              disabled\r\n                type=\"number\"\r\n                placeholder=\"total\"\r\n                name=\"total\"\r\n                value={values.quantity===0?values.total:values.quantity*parseInt(getPrice(values.product_id))}\r\n                onChange={handleChange}\r\n               \r\n              >\r\n            \r\n        \r\n              </Form.Control>\r\n      \r\n              \r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\">\r\n             <Form.Label>Payment</Form.Label>\r\n              \r\n              <Form.Control\r\n                as=\"select\"\r\n                placeholder=\"\"\r\n                name=\"payment1\"\r\n                value={values.payment1}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.payment1}\r\n              >\r\n                  <option value=\"0\">Choose Product</option>\r\n                  <option value=\"1\">Completed</option>\r\n                  <option value=\"2\">Pending</option>\r\n\r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.payment1}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            </Form.Row>\r\n          <Button type=\"submit\">Add Order</Button>\r\n          \r\n                        </Form>\r\n                        \r\n                    )}\r\n                    </Formik>\r\n                </Modal.Body>          \r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        customers:state.customer.customers,\r\n        products:state.item.items,\r\n        categories:state.category.categories,\r\n        user:state.auth.user,\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{loadUser,clearErrors,addOrder,getOrders,getCategories,getCustomers,getItems})(AddOrderModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\Order\\EditOrderModal.js",["341"],"import React,{Component} from 'react';\r\nimport { Col,Alert, Button, Modal,Form, Row, Card } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit} from '@fortawesome/free-solid-svg-icons';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport {updateOrder,getOrders} from '../../action/orderAction';\r\nimport back from '../../assets/images/back.jpg';\r\nimport {loginModalOpen} from '../../action/authActions'\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nconst schemaOrder = yup.object({\r\n    quantity: yup.number().positive().integer().min(1, \"Price Should be More Than 1\").max(1000, \"Price Should be Less Than 500K\"),   \r\n    payment1: yup.number().positive().integer().min(1,\"Choose Any Payment Status\"),\r\n\r\n})\r\n\r\n\r\nclass EditOrderModal extends Component{\r\n    \r\n    state={\r\n        modal:false,   // modal for adding item is false initially\r\n        product_id:'',\r\n        customer_id:'',\r\n        by_user_id:'',\r\n        quantity:0,\r\n        total:0,\r\n        payment:0,\r\n        msg:null,\r\n        isUpdate:false\r\n    };\r\n    componentDidMount(){\r\n        // this.props.loadUser();\r\n        const {id,product_id,customer_id,by_user_id,quantity,total,payment}=this.props.order;\r\n        this.setState({product_id:product_id,customer_id:customer_id,quantity:quantity,by_user_id:by_user_id,total:total,payment:payment});\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        const {error,isUpdate}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"UPDATE_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        // if Update close Modal\r\n        if(this.state.modal){\r\n            \r\n            if(isUpdate){\r\n                this.toggle();\r\n                this.props.loadUser();\r\n            }\r\n        }\r\n        \r\n    }\r\n    static propTypes={\r\n        isUpdate:PropTypes.bool,\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        register:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n        console.log(\"Props\",this.props);\r\n        // if(!this.props.isAuthenticated){\r\n        //     console.log(\"Authen\");\r\n        //     this.props.history.push('/')\r\n        //     this.props.loginModalOpen(true);\r\n           \r\n        // }\r\n        // console.log(\"from Toggle-> Modal Open:: \"+this.state.modal)\r\n        // else\r\n            this.setState({\r\n                modal:!this.state.modal\r\n            })\r\n    }\r\n\r\n\r\n    onChange=(e)=>{\r\n        this.setState({[e.target.name]:e.target.value});\r\n    }\r\n\r\nrender(){\r\n    console.log(\"product Edit Modal:\",this.props.product);\r\n    return(\r\n        <>\r\n            <OverlayTrigger        \r\n                        placement=\"bottom\"\r\n                    overlay={<Tooltip id=\"button-tooltip-2\">Edit Order</Tooltip>}>\r\n           \r\n            <Button style={{height:'31px',fontSize:'10px',padding:'.5rem .5rem',margin:'0rem'}} onClick={this.toggle} variant=\"primary\" size=\"sm\">\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n            </Button>\r\n\r\n            </OverlayTrigger>\r\n\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle}   >\r\n                <Modal.Header toggle={this.toggle} style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton>Update</Modal.Header>\r\n                <Modal.Body>\r\n                    <Card style={{display:'flex'}}>\r\n                        <Row style={{display:'flex',alignItems:'center'}}>\r\n                               <div style={{display:'flex',width:'15rem'}}> \r\n                                <Col style={{marginLeft:'.5 rem'}} ><img alt=\"alt\" style={{height:'80px',width:'80px'}} src={this.props.product_img}/></Col>\r\n                                <Col  style={{marginTop:'1rem',display:'flex',flexDirection:'column',alignItems:'center'}}><h7><b>{this.props.product_name}</b></h7><span style={{fontSize:'12px',color:'gray'}}>Qnty:{this.props.order.quantity}</span></Col>\r\n                                </div>\r\n                                <div style={{display:'flex',width:'15rem'}}>\r\n                                {/* <Col sm={2}></Col> */}\r\n                                <Col style={{marginLeft:'1rem'}}><img  alt=\"alt\" style={{borderRadius:'50%',border:'2px solid #3b44c1',height:'50px',width:'50px'}} src={this.props.customer_img}/></Col>\r\n                                <Col style={{marginTop:'.8rem',display:'flex',flexDirection:'column',alignItems:'center'}} ><h7><b>{this.props.customer_name}</b></h7></Col>\r\n                            </div>\r\n                        </Row>\r\n                    </Card>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n    <Formik\r\n    // validator={() => ({})}\r\n      validationSchema={schemaOrder}\r\n      initialValues={{\r\n        quantity:this.state.quantity,\r\n        total:this.state.quantity*this.props.product_price,\r\n        payment1:this.state.payment===\"Completed\"?\"1\":\"2\",\r\n        price:this.props.product_price\r\n        // mobile_number:''\r\n\r\n      }}\r\n        onSubmit={(values)=>{ \r\n        \r\n            const {quantity,payment1}=values;\r\n            const payment=payment1===\"1\"?\"Completed\":\"Pending\"\r\n            const id=this.props.order.id;\r\n            const product_id=this.state.product_id;\r\n            const customer_id=this.state.customer_id;\r\n            const by_user_id=this.state.by_user_id;\r\n            const total=quantity*this.props.product_price;\r\n\r\n                const editOrder={\r\n                    id,product_id,customer_id,by_user_id,quantity,total,payment\r\n                }\r\n                console.log(\"Submit:\",editOrder);\r\n                this.props.updateOrder(editOrder);\r\n                this.toggle();\r\n                setTimeout(()=>{\r\n                    this.props.getOrders();\r\n                },1500);\r\n            \r\n            }\r\n        }\r\n    >\r\n       \r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n           \r\n              <Form.Label>Quantity</Form.Label>\r\n              \r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                name=\"quantity\"\r\n                value={values.quantity}\r\n                // onChangeCapture={(e)=>this.setState({isBlocking:e.target.value>0})}\r\n                onChange={handleChange}//this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                isInvalid={!!errors.quantity}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.quantity}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n              <Form.Label>Payment</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                // type=\"password\"\r\n                placeholder=\"\"\r\n                name=\"payment1\"\r\n                value={values.payment1}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.payment1}\r\n                \r\n              >\r\n                  <option value=\"0\">Choose Payment</option>\r\n                  \r\n                <option value=\"1\">Completed</option>\r\n                <option value=\"2\">Pending</option>\r\n\r\n                  \r\n                 \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.payment1}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n           \r\n\r\n          </Form.Row>\r\n         \r\n         <Form.Row style={{fontWeight:'bold',color:'gray',border:'1px solid rgba(0,0,0,.125)',padding:'.5rem',borderRadius:'5px',marginBottom:'.5rem'}}><h7>Total:</h7><span><b>{this.props.product_price}</b></span>X<span><b>{values.quantity}</b>=<b>{values.quantity*values.price}</b></span></Form.Row>\r\n          <Button type=\"submit\">Update</Button>\r\n          \r\n         \r\n                        </Form>\r\n                        \r\n                    )}\r\n                    </Formik>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{updateOrder,clearErrors,loginModalOpen,getOrders})(withRouter(EditOrderModal));","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AnimatedCard\\AnimatedCard.js",["342","343","344","345"],"import { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar';\r\nimport CountUp from 'react-countup';\r\nimport React, { useState } from 'react';\r\nimport './AnimatedCard.css';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {  faQuestionCircle,faUserCircle,faCommentDollar, faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport AnimatedProgressProvider from \"./AnimatedProgressProvider\";\r\nimport { easeQuadInOut } from \"d3-ease\";\r\nimport {Col,Row, Spinner} from 'react-bootstrap'\r\nimport {Card} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport {getItems} from '../../action/itemAction';\r\nimport {getOrders} from '../../action/orderAction'\r\nfunction AnimatedCard(props) {\r\n\r\n    // const [products,setProducts]=useState([]);\r\n    const [Expenses,setExpenses]=useState(0);\r\n\r\n\r\n    const countExpenses=()=>{\r\n        let total=0;\r\n        props.products.map(product=>{\r\n            total+=product.price*product.stock\r\n            return\r\n        })\r\n        // console.log(\"Expenses:\",total);\r\n        setExpenses(total)\r\n    }\r\n    useEffect(()=>{\r\n        props.getItems();\r\n        props.getOrders();  \r\n    },[])\r\n    useEffect(()=>{\r\n        if(props.products){\r\n            countExpenses();\r\n            // setProducts(props.products)\r\n\r\n            // console.log(\"Products From Animated Card:\",products);\r\n        }\r\n    },[props.products]);\r\n    \r\n\r\n        return (\r\n            <>\r\n            {props.products.length===0?<Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" />:\r\n\r\n            <div style={{margin:'0px 17px'}}>\r\n                <Row  className=\"cardlist\">\r\n                    <Col lg={3} sm={6}>\r\n                        <Card className=\"card-box card1 bg-midnight-bloom p-3 mb-5\">\r\n                        \r\n                            <div className=\"d-flex align-items-center\">\r\n\r\n                            <AnimatedProgressProvider\r\n                                    valueStart={0}\r\n                                    \r\n                                    valueEnd={props.orders.length+5}\r\n                                    duration={3}\r\n                                    easingFunction={easeQuadInOut}\r\n                                    \r\n                                >\r\n                                    {value => {\r\n                                   \r\n                                    return (\r\n                                        <CircularProgressbarWithChildren\r\n                                        value={value}\r\n                                        \r\n                                        /* This is important to include, because if you're fully managing the\r\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\r\nelf, you'll want to disable the CSS animation. */\r\n                                        styles={buildStyles({pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\"})}\r\n                                        > \r\n\r\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\r\n                                        <FontAwesomeIcon icon={faQuestionCircle} className=\"font-size-lg icon1 \" />\r\n                                    </div>\r\n                                    </CircularProgressbarWithChildren>\r\n                                    );\r\n                                    }}\r\n                                </AnimatedProgressProvider>\r\n                                \r\n                                <div className=\"pl-3\">\r\n                                    <div className=\" text-white  font-weight-bold\">Orders</div>\r\n                                    <div className=\"value font-weight-bold pt-2 text-white \">\r\n                                        <CountUp\r\n                                            start={0}\r\n                                            end={props.orders.length}\r\n                                            duration={6}\r\n                                            delay={0}\r\n                                            separator=\"\"\r\n                                            decimals={0}\r\n                                            decimal=\",\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={3} sm={6}>\r\n                        <Card className=\"card-box card2 bg-royal p-3 mb-5\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                            \r\n                            <AnimatedProgressProvider\r\n                                    valueStart={0}\r\n                                    \r\n                                    valueEnd={54}\r\n                                    duration={6}\r\n                                    easingFunction={easeQuadInOut}\r\n                                    \r\n                                >\r\n                                    {value => {\r\n                                   \r\n                                    return (\r\n                                        <CircularProgressbarWithChildren\r\n                                        value={value}\r\n                                        \r\n                                        /* This is important to include, because if you're fully managing the\r\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\r\nelf, you'll want to disable the CSS animation. */\r\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\r\n                                        >\r\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\r\n                                        <FontAwesomeIcon icon={faUserCircle} className=\"font-size-lg icon1 \" />\r\n                                    </div>\r\n                                    </CircularProgressbarWithChildren>\r\n                                    );\r\n                                    }}\r\n                                </AnimatedProgressProvider>\r\n                                <div className=\"pl-3\">\r\n                                    <div className=\" text-white font-weight-bold\">Visitors</div>\r\n                                    <div className=\"value font-weight-bold text-white pt-2  \">\r\n                                        <CountUp\r\n                                            start={0}\r\n                                            end={54}\r\n                                            duration={6}\r\n                                            delay={2}\r\n                                            separator=\"\"\r\n                                            decimals={0}\r\n                                            decimal=\",\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={3} sm={6}>\r\n                        <Card className=\"card-box card3 bg-deep-sky p-3 mb-5\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                            <AnimatedProgressProvider\r\n                                    valueStart={0}\r\n                                    \r\n                                    valueEnd={54}\r\n                                    duration={6}\r\n                                    easingFunction={easeQuadInOut}\r\n                                    \r\n                                >\r\n                                    {value => {\r\n                                   \r\n                                    return (\r\n                                        <CircularProgressbarWithChildren\r\n                                        value={value}\r\n                                        \r\n                                        /* This is important to include, because if you're fully managing the\r\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\r\nelf, you'll want to disable the CSS animation. */\r\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\r\n                                        >\r\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\r\n                                        <FontAwesomeIcon icon={faShoppingBag} className=\"font-size-lg icon1 \" />\r\n                                    </div>\r\n                                    </CircularProgressbarWithChildren>\r\n                                    );\r\n                                    }}\r\n                                </AnimatedProgressProvider>\r\n                                <div className=\"pl-3\">\r\n                                    <div className=\" text-white font-weight-bold\">Products</div>\r\n                                    <div className=\"value font-weight-bold pt-2 text-white \">\r\n                                        <CountUp\r\n                                            start={0}\r\n                                            end={props.products.length}\r\n                                            duration={6}\r\n                                            delay={0}\r\n                                            separator=\"\"\r\n                                            decimals={0}\r\n                                            decimal=\",\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={3} sm={6}>\r\n                        <Card className=\"card-box card4 bg-plum-plate p-3 mb-5\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                            <AnimatedProgressProvider\r\n                                    valueStart={0}\r\n                                    \r\n                                    valueEnd={75}\r\n                                    duration={6}\r\n                                    easingFunction={easeQuadInOut}\r\n                                    \r\n                                >\r\n                                    {value => {\r\n                                    const roundedValue = Math.round(value);\r\n                                    return (\r\n                                        <CircularProgressbarWithChildren\r\n                                        value={value}\r\n\r\n\r\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\r\n                                        >\r\n                                             <div className=\"text-white d-40 rounded-circle btn-icon\">\r\n                                        <FontAwesomeIcon icon={faCommentDollar} className=\"font-size-lg icon1 \" />\r\n                                    </div>\r\n                                    </CircularProgressbarWithChildren>\r\n                                    );\r\n                                    }}\r\n                                </AnimatedProgressProvider>\r\n                                <div className=\"pl-3\">\r\n                                    <div className=\"text-white  font-weight-bold\">Expenses</div>\r\n                                    <div className=\"value font-weight-bold pt-2  text-white\">\r\n                                        ₹<CountUp\r\n                                        start={0}\r\n                                        end={Expenses}\r\n                                        duration={6}\r\n                                        delay={1}\r\n                                        separator=\"\"\r\n                                        decimals={0}\r\n                                        decimal=\",\"\r\n                                    />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n        </div>}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        itemsLoaded:state.item.itemsLoaded,\r\n        products:state.item.items,\r\n        orders:state.order.orders\r\n    }\r\n}\r\n    export default connect(mapStateToProps,{getItems,getOrders})(AnimatedCard);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\ProductListData.js",["346","347","348","349","350","351","352","353","354","355","356"],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\ProductsList\\NewProductModal.js",["357","358","359","360","361","362","363"],"import React,{Component} from 'react';\r\nimport {Col, Alert,NavLink, Button, Modal,Form,FormGroup,Label, Input, InputGroup, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {login} from '../../action/authActions';\r\nimport {addItem} from '../../action/itemAction';\r\nimport {getCategories} from '../../action/categoryAction';\r\n\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport back from '../../assets/images/back.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// import e from 'express';\r\nconst schemaPro = yup.object({\r\n    name: yup.string().min(3, 'Name must be at least 3 characters').max(24, 'Password can be maximum 20 characters').required(),\r\n    description: yup.string().required(),\r\n    manufacturer: yup.string().required(),\r\n    // img: yup.string().required(),\r\n    price: yup.number().positive().integer().min(1, \"Price Should be More Than 1\").max(500000, \"Price Should be Less Than 500K\"),\r\n    stock: yup.number().integer().min(1, \"Stock Should be More Than 1\").max(1000, \"Stock Should be Less Than 1K\"),\r\n    \r\n    // rating: yup.number().positive().integer().min(1,\"Min\").max(5,\"Max\"),\r\n    \r\n    category: yup.number().positive().integer().min(1,\"Choose Any Category\"),\r\n    // img: yup.string().required(),\r\n})\r\n\r\nclass NewProductModal extends Component{\r\n    state={\r\n        modal:false,   // modal for adding item is false initially\r\n        msg:null,\r\n        imageURL:'',\r\n        categories:this.props.categories\r\n    };\r\n    componentDidMount(){\r\n      // this.props.getCategories();\r\n      this.setState({categories:this.props.categories})\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        const {error,isAuthenticated}=this.props;\r\n        if(error!==prevProps.error){\r\n            if(error.id===\"LOGIN_FAIL\"){\r\n                this.setState({msg:error.msg.msg});\r\n            }\r\n            else{\r\n                this.setState({msg:null});\r\n            }\r\n        }\r\n        \r\n    }\r\n    static propTypes={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        login:PropTypes.func.isRequired,\r\n        clearErrors:PropTypes.func.isRequired\r\n    }\r\n\r\n    toggle=()=>{  \r\n        // clear the error\r\n        this.props.clearErrors();\r\n        // to toggle the modal \r\n        console.log(this.state.modal)\r\n        this.setState({\r\n            modal:!this.state.modal\r\n        })\r\n    }\r\n\r\n\r\n    encodeImageFileAsURL=()=> {\r\n      console.log(\"image uploading func. called\");\r\n      var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n      if (filesSelected.length > 0) {\r\n        var fileToLoad = filesSelected[0];\r\n  \r\n        var fileReader = new FileReader();\r\n  \r\n        fileReader.onload = (fileLoadedEvent)=> {\r\n          var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n  \r\n          var newImage = document.createElement('img');\r\n          newImage.src = srcData;\r\n          this.setState({imageURL:newImage.src});\r\n          // console.log(\"ImageURL:\",this.state.imageURL);\r\n         \r\n        }\r\n        fileReader.readAsDataURL(fileToLoad);\r\n      }\r\n\r\n    }\r\nrender(){\r\n  console.log(\"Categories:\",this.state.categories);\r\n    return(\r\n        <div>\r\n             <NavLink onClick={this.toggle} href=\"#\">\r\n            <Button><FontAwesomeIcon  icon={faPlus}/><h7 style={{marginLeft:'.3rem'}} className=\"newproductbuttontext\">Create Product</h7></Button>\r\n            </NavLink>\r\n\r\n            <Modal show={this.state.modal} onHide={this.toggle} >\r\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Create Product</b></Modal.Header>\r\n                <Modal.Body>\r\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\r\n\r\n\r\n\r\n\r\n\r\n    <Formik\r\n      validationSchema={schemaPro}\r\n     \r\n\r\n      initialValues={{\r\n        name:\"\",\r\n        description:\"\",\r\n        manufacturer:\"\",\r\n        price:'',\r\n        stock:'',\r\n        // rating:'',\r\n        img:\"\",\r\n        category:0,\r\n        // createdBy:'Admin',\r\n        // rank:0,\r\n      }}\r\n      onSubmit={(values)=>{ \r\n        console.log(\"onSUbmit\");\r\n        const {name,description,manufacturer,price,stock,category}=values;\r\n        console.log(\"On Submit Called\",name);\r\n        // this.encodeImageFileAsURL();\r\n        \r\n        const user=this.props.user;\r\n\r\n        var Category=this.props.categories.filter(\r\n          function (cat) {\r\n            if(cat.id ===parseInt(category))return cat.name \r\n          }\r\n        )\r\n        \r\n        let CategoryName=Category[0].name;\r\n        let img=this.state.imageURL;\r\n        console.log(\"Image:\",img);\r\n        const product={\r\n          name,description,manufacturer,price,stock,img,CategoryName,user\r\n        }\r\n      //  console.log(\"Name:\",name,\" Des:\",description,\" Manu:\",manufacturer,\" price:\",price,\" Stock:\",stock,\" Img:\",img,\"  Cat\",CategoryName,\" User:\",user);\r\n        this.props.addItem(product);\r\n        this.toggle();\r\n       }\r\n     }\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        values,\r\n        errors,\r\n         }) => (\r\n        <Form noValidate onSubmit={handleSubmit}>\r\n          \r\n          \r\n          <Form.Row>\r\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\r\n              <Form.Label>Product Name</Form.Label>\r\n              \r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Product Name\"\r\n                  aria-describedby=\"inputGroupPrepend\"\r\n                  name=\"name\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  isInvalid={!!errors.name}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.name}\r\n                </Form.Control.Feedback>\r\n              \r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n              <Form.Label>Price</Form.Label>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text id=\"inputGroupPrepend\">₹</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Price\"\r\n                name=\"price\"\r\n                value={values.price}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.price}\r\n              />\r\n\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.price}\r\n              </Form.Control.Feedback>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Stock</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Quantity\"\r\n                name=\"stock\"\r\n                value={values.stock}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.stock}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.stock}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik04\">\r\n              <Form.Label>Manufacturer</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Manufacturer\"\r\n                name=\"manufacturer\"\r\n                value={values.manufacturer}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.manufacturer}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.manufacturer}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik05\">\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n              as=\"textarea\"\r\n                type=\"textarea\"\r\n                placeholder=\"Description\"\r\n                name=\"description\"\r\n                value={values.description}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.description}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.description}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n            <Form.Row>\r\n            <Form.Group as={Col} md=\"5\" controlId=\"validationFormik06\">\r\n              <Form.Label>Select Category</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                // type=\"password\"\r\n                placeholder=\"\"\r\n                name=\"category\"\r\n                value={values.category}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.category}\r\n                \r\n              >\r\n                  <option value=\"0\">Choose Category</option>\r\n                  {this.props.categories.map((category)=>(\r\n                        <option value={category.id}>{category.name}</option>\r\n\r\n                  ))}\r\n                 \r\n              </Form.Control>\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.category}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"7\" controlId=\"validationFormik07\">\r\n                <div className=\"mb-3\">\r\n                    <Form.File id=\"formcheck-api-regular\">\r\n                    <Form.File.Label>Product Image</Form.File.Label>\r\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                    </Form.File>\r\n                </div>\r\n            </Form.Group>\r\n\r\n          </Form.Row>\r\n          \r\n          <Button type=\"submit\">Submit</Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n}\r\nconst mapStateToProps= state=>{\r\n    return({\r\n        categories:state.category.categories,\r\n        user:state.auth.user,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        error:state.error\r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{clearErrors,addItem,getCategories})(NewProductModal);","C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\CustomCheckbox\\CustomCheckbox.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\AnimatedCard\\AnimatedProgressProvider.js",[],"C:\\Users\\spicy\\Desktop\\Project\\client\\src\\components\\LazyLoadingPage\\Loading.js",[],{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","replacedBy":"367"},{"ruleId":"368","severity":1,"message":"369","line":17,"column":7,"nodeType":"370","messageId":"371","endLine":17,"endColumn":13},{"ruleId":"372","severity":1,"message":"373","line":101,"column":27,"nodeType":"374","endLine":101,"endColumn":46},{"ruleId":"368","severity":1,"message":"369","line":26,"column":7,"nodeType":"370","messageId":"371","endLine":26,"endColumn":13},{"ruleId":"375","severity":1,"message":"376","line":249,"column":362,"nodeType":"377","endLine":249,"endColumn":368},{"ruleId":"375","severity":1,"message":"376","line":250,"column":101,"nodeType":"377","endLine":250,"endColumn":107},{"ruleId":"375","severity":1,"message":"376","line":250,"column":345,"nodeType":"377","endLine":250,"endColumn":351},{"ruleId":"378","severity":1,"message":"379","line":304,"column":331,"nodeType":"374","endLine":304,"endColumn":334},{"ruleId":"378","severity":1,"message":"380","line":129,"column":13,"nodeType":"374","endLine":129,"endColumn":25},{"ruleId":"368","severity":1,"message":"381","line":2,"column":8,"nodeType":"370","messageId":"371","endLine":2,"endColumn":21},{"ruleId":"368","severity":1,"message":"382","line":3,"column":30,"nodeType":"370","messageId":"371","endLine":3,"endColumn":36},{"ruleId":"368","severity":1,"message":"383","line":3,"column":37,"nodeType":"370","messageId":"371","endLine":3,"endColumn":42},{"ruleId":"368","severity":1,"message":"384","line":3,"column":43,"nodeType":"370","messageId":"371","endLine":3,"endColumn":47},{"ruleId":"368","severity":1,"message":"385","line":3,"column":48,"nodeType":"370","messageId":"371","endLine":3,"endColumn":55},{"ruleId":"368","severity":1,"message":"369","line":11,"column":7,"nodeType":"370","messageId":"371","endLine":11,"endColumn":13},{"ruleId":"378","severity":1,"message":"379","line":56,"column":33,"nodeType":"374","endLine":56,"endColumn":97},{"ruleId":"378","severity":1,"message":"380","line":59,"column":33,"nodeType":"374","endLine":59,"endColumn":140},{"ruleId":"386","severity":1,"message":"387","line":42,"column":30,"nodeType":"370","messageId":"388","endLine":42,"endColumn":33},{"ruleId":"386","severity":1,"message":"387","line":46,"column":30,"nodeType":"370","messageId":"388","endLine":46,"endColumn":33},{"ruleId":"372","severity":1,"message":"373","line":50,"column":25,"nodeType":"374","endLine":50,"endColumn":124},{"ruleId":"372","severity":1,"message":"373","line":65,"column":21,"nodeType":"374","endLine":65,"endColumn":120},{"ruleId":"372","severity":1,"message":"373","line":118,"column":71,"nodeType":"374","endLine":118,"endColumn":109},{"ruleId":"368","severity":1,"message":"389","line":2,"column":16,"nodeType":"370","messageId":"371","endLine":2,"endColumn":23},{"ruleId":"368","severity":1,"message":"390","line":2,"column":92,"nodeType":"370","messageId":"371","endLine":2,"endColumn":100},{"ruleId":"368","severity":1,"message":"391","line":87,"column":16,"nodeType":"370","messageId":"371","endLine":87,"endColumn":21},{"ruleId":"368","severity":1,"message":"392","line":87,"column":22,"nodeType":"370","messageId":"371","endLine":87,"endColumn":30},{"ruleId":"368","severity":1,"message":"393","line":28,"column":11,"nodeType":"370","messageId":"371","endLine":28,"endColumn":28},{"ruleId":"372","severity":1,"message":"373","line":39,"column":61,"nodeType":"374","endLine":39,"endColumn":100},{"ruleId":"368","severity":1,"message":"369","line":7,"column":7,"nodeType":"370","messageId":"371","endLine":7,"endColumn":13},{"ruleId":"368","severity":1,"message":"394","line":49,"column":13,"nodeType":"370","messageId":"371","endLine":49,"endColumn":21},{"ruleId":"368","severity":1,"message":"395","line":52,"column":16,"nodeType":"370","messageId":"371","endLine":52,"endColumn":24},{"ruleId":"368","severity":1,"message":"396","line":1,"column":10,"nodeType":"370","messageId":"371","endLine":1,"endColumn":30},{"ruleId":"368","severity":1,"message":"397","line":1,"column":32,"nodeType":"370","messageId":"371","endLine":1,"endColumn":42},{"ruleId":"368","severity":1,"message":"398","line":1,"column":59,"nodeType":"370","messageId":"371","endLine":1,"endColumn":72},{"ruleId":"368","severity":1,"message":"399","line":1,"column":142,"nodeType":"370","messageId":"371","endLine":1,"endColumn":149},{"ruleId":"368","severity":1,"message":"389","line":6,"column":10,"nodeType":"370","messageId":"371","endLine":6,"endColumn":17},{"ruleId":"368","severity":1,"message":"400","line":14,"column":9,"nodeType":"370","messageId":"371","endLine":14,"endColumn":15},{"ruleId":"401","severity":1,"message":"402","line":33,"column":7,"nodeType":"403","endLine":33,"endColumn":38,"suggestions":"404"},{"ruleId":"372","severity":1,"message":"373","line":54,"column":24,"nodeType":"374","endLine":54,"endColumn":89},{"ruleId":"405","severity":1,"message":"406","line":103,"column":20,"nodeType":"407","messageId":"408","endLine":103,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":114,"column":20,"nodeType":"407","messageId":"408","endLine":114,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":124,"column":27,"nodeType":"409","messageId":"410","endLine":124,"endColumn":29},{"ruleId":"368","severity":1,"message":"411","line":6,"column":10,"nodeType":"370","messageId":"371","endLine":6,"endColumn":23},{"ruleId":"368","severity":1,"message":"412","line":6,"column":25,"nodeType":"370","messageId":"371","endLine":6,"endColumn":38},{"ruleId":"368","severity":1,"message":"413","line":6,"column":72,"nodeType":"370","messageId":"371","endLine":6,"endColumn":82},{"ruleId":"368","severity":1,"message":"414","line":6,"column":93,"nodeType":"370","messageId":"371","endLine":6,"endColumn":104},{"ruleId":"401","severity":1,"message":"402","line":15,"column":7,"nodeType":"403","endLine":15,"endColumn":9,"suggestions":"415"},{"ruleId":"401","severity":1,"message":"416","line":21,"column":7,"nodeType":"403","endLine":21,"endColumn":24,"suggestions":"417"},{"ruleId":"372","severity":1,"message":"373","line":47,"column":140,"nodeType":"374","endLine":47,"endColumn":316},{"ruleId":"368","severity":1,"message":"418","line":22,"column":8,"nodeType":"370","messageId":"371","endLine":22,"endColumn":13},{"ruleId":"368","severity":1,"message":"419","line":22,"column":14,"nodeType":"370","messageId":"371","endLine":22,"endColumn":22},{"ruleId":"401","severity":1,"message":"402","line":30,"column":3,"nodeType":"403","endLine":30,"endColumn":5,"suggestions":"420"},{"ruleId":"375","severity":1,"message":"376","line":182,"column":292,"nodeType":"377","endLine":182,"endColumn":298},{"ruleId":"375","severity":1,"message":"376","line":183,"column":101,"nodeType":"377","endLine":183,"endColumn":107},{"ruleId":"375","severity":1,"message":"376","line":183,"column":295,"nodeType":"377","endLine":183,"endColumn":301},{"ruleId":"372","severity":1,"message":"373","line":221,"column":147,"nodeType":"374","endLine":221,"endColumn":278},{"ruleId":"372","severity":1,"message":"373","line":222,"column":148,"nodeType":"374","endLine":222,"endColumn":231},{"ruleId":"372","severity":1,"message":"373","line":246,"column":88,"nodeType":"374","endLine":246,"endColumn":218},{"ruleId":"368","severity":1,"message":"421","line":10,"column":11,"nodeType":"370","messageId":"371","endLine":10,"endColumn":23},{"ruleId":"422","severity":1,"message":"423","line":10,"column":1,"nodeType":"424","endLine":30,"endColumn":2},{"ruleId":"422","severity":1,"message":"423","line":15,"column":1,"nodeType":"424","endLine":98,"endColumn":2},{"ruleId":"422","severity":1,"message":"423","line":9,"column":1,"nodeType":"424","endLine":26,"endColumn":2},{"ruleId":"422","severity":1,"message":"423","line":10,"column":1,"nodeType":"424","endLine":80,"endColumn":2},{"ruleId":"422","severity":1,"message":"423","line":10,"column":1,"nodeType":"424","endLine":80,"endColumn":2},{"ruleId":"422","severity":1,"message":"423","line":10,"column":1,"nodeType":"424","endLine":77,"endColumn":2},{"ruleId":"368","severity":1,"message":"389","line":4,"column":10,"nodeType":"370","messageId":"371","endLine":4,"endColumn":17},{"ruleId":"368","severity":1,"message":"425","line":7,"column":24,"nodeType":"370","messageId":"371","endLine":7,"endColumn":34},{"ruleId":"368","severity":1,"message":"426","line":2,"column":48,"nodeType":"370","messageId":"371","endLine":2,"endColumn":57},{"ruleId":"368","severity":1,"message":"427","line":2,"column":58,"nodeType":"370","messageId":"371","endLine":2,"endColumn":63},{"ruleId":"368","severity":1,"message":"428","line":2,"column":65,"nodeType":"370","messageId":"371","endLine":2,"endColumn":70},{"ruleId":"378","severity":1,"message":"380","line":231,"column":87,"nodeType":"374","endLine":231,"endColumn":99},{"ruleId":"378","severity":1,"message":"380","line":330,"column":112,"nodeType":"374","endLine":330,"endColumn":124},{"ruleId":"368","severity":1,"message":"382","line":2,"column":30,"nodeType":"370","messageId":"371","endLine":2,"endColumn":36},{"ruleId":"368","severity":1,"message":"384","line":2,"column":43,"nodeType":"370","messageId":"371","endLine":2,"endColumn":47},{"ruleId":"368","severity":1,"message":"385","line":2,"column":48,"nodeType":"370","messageId":"371","endLine":2,"endColumn":55},{"ruleId":"368","severity":1,"message":"429","line":6,"column":10,"nodeType":"370","messageId":"371","endLine":6,"endColumn":17},{"ruleId":"368","severity":1,"message":"430","line":6,"column":18,"nodeType":"370","messageId":"371","endLine":6,"endColumn":24},{"ruleId":"431","severity":1,"message":"432","line":66,"column":23,"nodeType":"374","endLine":72,"endColumn":25},{"ruleId":"368","severity":1,"message":"433","line":17,"column":7,"nodeType":"370","messageId":"371","endLine":17,"endColumn":18},{"ruleId":"378","severity":1,"message":"379","line":400,"column":87,"nodeType":"374","endLine":400,"endColumn":91},{"ruleId":"378","severity":1,"message":"379","line":499,"column":112,"nodeType":"374","endLine":499,"endColumn":116},{"ruleId":"368","severity":1,"message":"434","line":1,"column":10,"nodeType":"370","messageId":"371","endLine":1,"endColumn":17},{"ruleId":"368","severity":1,"message":"382","line":3,"column":35,"nodeType":"370","messageId":"371","endLine":3,"endColumn":41},{"ruleId":"368","severity":1,"message":"383","line":3,"column":42,"nodeType":"370","messageId":"371","endLine":3,"endColumn":47},{"ruleId":"368","severity":1,"message":"384","line":3,"column":48,"nodeType":"370","messageId":"371","endLine":3,"endColumn":52},{"ruleId":"368","severity":1,"message":"385","line":3,"column":53,"nodeType":"370","messageId":"371","endLine":3,"endColumn":60},{"ruleId":"368","severity":1,"message":"426","line":2,"column":48,"nodeType":"370","messageId":"371","endLine":2,"endColumn":57},{"ruleId":"368","severity":1,"message":"427","line":2,"column":58,"nodeType":"370","messageId":"371","endLine":2,"endColumn":63},{"ruleId":"368","severity":1,"message":"428","line":2,"column":65,"nodeType":"370","messageId":"371","endLine":2,"endColumn":70},{"ruleId":"368","severity":1,"message":"435","line":2,"column":84,"nodeType":"370","messageId":"371","endLine":2,"endColumn":95},{"ruleId":"368","severity":1,"message":"436","line":6,"column":9,"nodeType":"370","messageId":"371","endLine":6,"endColumn":14},{"ruleId":"368","severity":1,"message":"437","line":39,"column":22,"nodeType":"370","messageId":"371","endLine":39,"endColumn":37},{"ruleId":"368","severity":1,"message":"438","line":83,"column":7,"nodeType":"370","messageId":"371","endLine":83,"endColumn":16},{"ruleId":"368","severity":1,"message":"439","line":38,"column":16,"nodeType":"370","messageId":"371","endLine":38,"endColumn":18},{"ruleId":"405","severity":1,"message":"406","line":26,"column":13,"nodeType":"407","messageId":"408","endLine":26,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":34,"column":7,"nodeType":"403","endLine":34,"endColumn":9,"suggestions":"440"},{"ruleId":"401","severity":1,"message":"441","line":42,"column":7,"nodeType":"403","endLine":42,"endColumn":23,"suggestions":"442"},{"ruleId":"368","severity":1,"message":"443","line":207,"column":43,"nodeType":"370","messageId":"371","endLine":207,"endColumn":55},{"ruleId":"368","severity":1,"message":"444","line":55,"column":12,"nodeType":"370","messageId":"371","endLine":55,"endColumn":17},{"ruleId":"368","severity":1,"message":"445","line":55,"column":18,"nodeType":"370","messageId":"371","endLine":55,"endColumn":26},{"ruleId":"368","severity":1,"message":"446","line":60,"column":21,"nodeType":"370","messageId":"371","endLine":60,"endColumn":32},{"ruleId":"401","severity":1,"message":"447","line":89,"column":7,"nodeType":"403","endLine":89,"endColumn":53,"suggestions":"448"},{"ruleId":"368","severity":1,"message":"449","line":102,"column":7,"nodeType":"370","messageId":"371","endLine":102,"endColumn":16},{"ruleId":"368","severity":1,"message":"450","line":121,"column":7,"nodeType":"370","messageId":"371","endLine":121,"endColumn":20},{"ruleId":"368","severity":1,"message":"451","line":148,"column":25,"nodeType":"370","messageId":"371","endLine":148,"endColumn":26},{"ruleId":"375","severity":1,"message":"376","line":248,"column":313,"nodeType":"377","endLine":248,"endColumn":319},{"ruleId":"375","severity":1,"message":"376","line":249,"column":101,"nodeType":"377","endLine":249,"endColumn":107},{"ruleId":"375","severity":1,"message":"376","line":249,"column":295,"nodeType":"377","endLine":249,"endColumn":301},{"ruleId":"378","severity":1,"message":"379","line":266,"column":195,"nodeType":"374","endLine":266,"endColumn":198},{"ruleId":"368","severity":1,"message":"426","line":2,"column":48,"nodeType":"370","messageId":"371","endLine":2,"endColumn":57},{"ruleId":"368","severity":1,"message":"427","line":2,"column":58,"nodeType":"370","messageId":"371","endLine":2,"endColumn":63},{"ruleId":"368","severity":1,"message":"428","line":2,"column":65,"nodeType":"370","messageId":"371","endLine":2,"endColumn":70},{"ruleId":"368","severity":1,"message":"435","line":2,"column":84,"nodeType":"370","messageId":"371","endLine":2,"endColumn":95},{"ruleId":"368","severity":1,"message":"436","line":6,"column":9,"nodeType":"370","messageId":"371","endLine":6,"endColumn":14},{"ruleId":"368","severity":1,"message":"437","line":45,"column":22,"nodeType":"370","messageId":"371","endLine":45,"endColumn":37},{"ruleId":"405","severity":1,"message":"452","line":137,"column":11,"nodeType":"453","messageId":"454","endLine":137,"endColumn":20},"no-native-reassign",["455"],"no-negated-in-lhs",["456"],"no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ChartistGraph' is defined but never used.","'Button' is defined but never used.","'Media' is defined but never used.","'Form' is defined but never used.","'Tooltip' is defined but never used.","no-use-before-define","'ids' was used before it was defined.","usedBeforeDefined","'NavLink' is defined but never used.","'Collapse' is defined but never used.","'error' is assigned a value but never used.","'isUpdate' is assigned a value but never used.","'sidebarBackground' is assigned a value but never used.","'maxlimit' is assigned a value but never used.","'products' is assigned a value but never used.","'faArrowAltCircleDown' is defined but never used.","'faCalendar' is defined but never used.","'faCalendarDay' is defined but never used.","'faStore' is defined but never used.","'params' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["457"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","ArrowFunctionExpression","expectedInside","'faAddressBook' is defined but never used.","'faAddressCard' is defined but never used.","'faMailBulk' is defined but never used.","'faVoicemail' is defined but never used.",["458"],"React Hook useEffect has a missing dependency: 'customers'. Either include it or remove the dependency array.",["459"],"'open1' is assigned a value but never used.","'setOpen1' is assigned a value but never used.",["460"],"'notification' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'faUserEdit' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'faTimes' is defined but never used.","'faEdit' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'phoneRegExp' is assigned a value but never used.","'faCubes' is defined but never used.","'ButtonGroup' is defined but never used.","'login' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'customers' is assigned a value but never used.","'id' is assigned a value but never used.",["461"],"React Hook useEffect has a missing dependency: 'countExpenses'. Either include it or remove the dependency array.",["462"],"'roundedValue' is assigned a value but never used.","'open3' is assigned a value but never used.","'setOpen3' is assigned a value but never used.","'setIsNewest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sort'. Either include it or remove the dependency array.",["463"],"'deleteAll' is assigned a value but never used.","'deleteProduct' is assigned a value but never used.","'f' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"466","fix":"470"},{"desc":"466","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},"Update the dependencies array to be: [history, props, props.isAuthenticated]",{"range":"476","text":"477"},"Update the dependencies array to be: [props]",{"range":"478","text":"479"},"Update the dependencies array to be: [customers, props.customers]",{"range":"480","text":"481"},{"range":"482","text":"479"},{"range":"483","text":"479"},"Update the dependencies array to be: [countExpenses, props.products]",{"range":"484","text":"485"},"Update the dependencies array to be: [isDecending, isAscending, isNewest, newProducts, sort]",{"range":"486","text":"487"},[1354,1385],"[history, props, props.isAuthenticated]",[727,729],"[props]",[903,920],"[customers, props.customers]",[1243,1245],[1283,1285],[1501,1517],"[countExpenses, props.products]",[3237,3283],"[isDecending, isAscending, isNewest, newProducts, sort]"]